
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Pesquisadores
 * 
 */
export type Pesquisadores = $Result.DefaultSelection<Prisma.$PesquisadoresPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Candidato
 * 
 */
export type Candidato = $Result.DefaultSelection<Prisma.$CandidatoPayload>
/**
 * Model municipio
 * 
 */
export type municipio = $Result.DefaultSelection<Prisma.$municipioPayload>
/**
 * Model Estado
 * 
 */
export type Estado = $Result.DefaultSelection<Prisma.$EstadoPayload>
/**
 * Model Images
 * 
 */
export type Images = $Result.DefaultSelection<Prisma.$ImagesPayload>
/**
 * Model Votos
 * 
 */
export type Votos = $Result.DefaultSelection<Prisma.$VotosPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Pesquisadores
 * const pesquisadores = await prisma.pesquisadores.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Pesquisadores
   * const pesquisadores = await prisma.pesquisadores.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.pesquisadores`: Exposes CRUD operations for the **Pesquisadores** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pesquisadores
    * const pesquisadores = await prisma.pesquisadores.findMany()
    * ```
    */
  get pesquisadores(): Prisma.PesquisadoresDelegate<ExtArgs>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs>;

  /**
   * `prisma.candidato`: Exposes CRUD operations for the **Candidato** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Candidatoes
    * const candidatoes = await prisma.candidato.findMany()
    * ```
    */
  get candidato(): Prisma.CandidatoDelegate<ExtArgs>;

  /**
   * `prisma.municipio`: Exposes CRUD operations for the **municipio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Municipios
    * const municipios = await prisma.municipio.findMany()
    * ```
    */
  get municipio(): Prisma.municipioDelegate<ExtArgs>;

  /**
   * `prisma.estado`: Exposes CRUD operations for the **Estado** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Estados
    * const estados = await prisma.estado.findMany()
    * ```
    */
  get estado(): Prisma.EstadoDelegate<ExtArgs>;

  /**
   * `prisma.images`: Exposes CRUD operations for the **Images** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.images.findMany()
    * ```
    */
  get images(): Prisma.ImagesDelegate<ExtArgs>;

  /**
   * `prisma.votos`: Exposes CRUD operations for the **Votos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Votos
    * const votos = await prisma.votos.findMany()
    * ```
    */
  get votos(): Prisma.VotosDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.4.2
   * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Pesquisadores: 'Pesquisadores',
    Role: 'Role',
    Candidato: 'Candidato',
    municipio: 'municipio',
    Estado: 'Estado',
    Images: 'Images',
    Votos: 'Votos'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'pesquisadores' | 'role' | 'candidato' | 'municipio' | 'estado' | 'images' | 'votos'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Pesquisadores: {
        payload: Prisma.$PesquisadoresPayload<ExtArgs>
        fields: Prisma.PesquisadoresFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PesquisadoresFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PesquisadoresPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PesquisadoresFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PesquisadoresPayload>
          }
          findFirst: {
            args: Prisma.PesquisadoresFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PesquisadoresPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PesquisadoresFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PesquisadoresPayload>
          }
          findMany: {
            args: Prisma.PesquisadoresFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PesquisadoresPayload>[]
          }
          create: {
            args: Prisma.PesquisadoresCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PesquisadoresPayload>
          }
          createMany: {
            args: Prisma.PesquisadoresCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PesquisadoresDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PesquisadoresPayload>
          }
          update: {
            args: Prisma.PesquisadoresUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PesquisadoresPayload>
          }
          deleteMany: {
            args: Prisma.PesquisadoresDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PesquisadoresUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PesquisadoresUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PesquisadoresPayload>
          }
          aggregate: {
            args: Prisma.PesquisadoresAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePesquisadores>
          }
          groupBy: {
            args: Prisma.PesquisadoresGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PesquisadoresGroupByOutputType>[]
          }
          count: {
            args: Prisma.PesquisadoresCountArgs<ExtArgs>,
            result: $Utils.Optional<PesquisadoresCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>,
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Candidato: {
        payload: Prisma.$CandidatoPayload<ExtArgs>
        fields: Prisma.CandidatoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CandidatoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CandidatoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatoPayload>
          }
          findFirst: {
            args: Prisma.CandidatoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CandidatoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatoPayload>
          }
          findMany: {
            args: Prisma.CandidatoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatoPayload>[]
          }
          create: {
            args: Prisma.CandidatoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatoPayload>
          }
          createMany: {
            args: Prisma.CandidatoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CandidatoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatoPayload>
          }
          update: {
            args: Prisma.CandidatoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatoPayload>
          }
          deleteMany: {
            args: Prisma.CandidatoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CandidatoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CandidatoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CandidatoPayload>
          }
          aggregate: {
            args: Prisma.CandidatoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCandidato>
          }
          groupBy: {
            args: Prisma.CandidatoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CandidatoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CandidatoCountArgs<ExtArgs>,
            result: $Utils.Optional<CandidatoCountAggregateOutputType> | number
          }
        }
      }
      municipio: {
        payload: Prisma.$municipioPayload<ExtArgs>
        fields: Prisma.municipioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.municipioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$municipioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.municipioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$municipioPayload>
          }
          findFirst: {
            args: Prisma.municipioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$municipioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.municipioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$municipioPayload>
          }
          findMany: {
            args: Prisma.municipioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$municipioPayload>[]
          }
          create: {
            args: Prisma.municipioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$municipioPayload>
          }
          createMany: {
            args: Prisma.municipioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.municipioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$municipioPayload>
          }
          update: {
            args: Prisma.municipioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$municipioPayload>
          }
          deleteMany: {
            args: Prisma.municipioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.municipioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.municipioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$municipioPayload>
          }
          aggregate: {
            args: Prisma.MunicipioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMunicipio>
          }
          groupBy: {
            args: Prisma.municipioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MunicipioGroupByOutputType>[]
          }
          count: {
            args: Prisma.municipioCountArgs<ExtArgs>,
            result: $Utils.Optional<MunicipioCountAggregateOutputType> | number
          }
        }
      }
      Estado: {
        payload: Prisma.$EstadoPayload<ExtArgs>
        fields: Prisma.EstadoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EstadoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EstadoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          findFirst: {
            args: Prisma.EstadoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EstadoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          findMany: {
            args: Prisma.EstadoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>[]
          }
          create: {
            args: Prisma.EstadoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          createMany: {
            args: Prisma.EstadoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EstadoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          update: {
            args: Prisma.EstadoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          deleteMany: {
            args: Prisma.EstadoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EstadoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EstadoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          aggregate: {
            args: Prisma.EstadoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEstado>
          }
          groupBy: {
            args: Prisma.EstadoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EstadoGroupByOutputType>[]
          }
          count: {
            args: Prisma.EstadoCountArgs<ExtArgs>,
            result: $Utils.Optional<EstadoCountAggregateOutputType> | number
          }
        }
      }
      Images: {
        payload: Prisma.$ImagesPayload<ExtArgs>
        fields: Prisma.ImagesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImagesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImagesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagesPayload>
          }
          findFirst: {
            args: Prisma.ImagesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImagesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagesPayload>
          }
          findMany: {
            args: Prisma.ImagesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagesPayload>[]
          }
          create: {
            args: Prisma.ImagesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagesPayload>
          }
          createMany: {
            args: Prisma.ImagesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ImagesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagesPayload>
          }
          update: {
            args: Prisma.ImagesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagesPayload>
          }
          deleteMany: {
            args: Prisma.ImagesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ImagesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ImagesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagesPayload>
          }
          aggregate: {
            args: Prisma.ImagesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateImages>
          }
          groupBy: {
            args: Prisma.ImagesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ImagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImagesCountArgs<ExtArgs>,
            result: $Utils.Optional<ImagesCountAggregateOutputType> | number
          }
        }
      }
      Votos: {
        payload: Prisma.$VotosPayload<ExtArgs>
        fields: Prisma.VotosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VotosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VotosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VotosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VotosPayload>
          }
          findFirst: {
            args: Prisma.VotosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VotosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VotosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VotosPayload>
          }
          findMany: {
            args: Prisma.VotosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VotosPayload>[]
          }
          create: {
            args: Prisma.VotosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VotosPayload>
          }
          createMany: {
            args: Prisma.VotosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VotosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VotosPayload>
          }
          update: {
            args: Prisma.VotosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VotosPayload>
          }
          deleteMany: {
            args: Prisma.VotosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VotosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VotosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VotosPayload>
          }
          aggregate: {
            args: Prisma.VotosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVotos>
          }
          groupBy: {
            args: Prisma.VotosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VotosGroupByOutputType>[]
          }
          count: {
            args: Prisma.VotosCountArgs<ExtArgs>,
            result: $Utils.Optional<VotosCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    role: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleCountOutputTypeCountRoleArgs
  }

  // Custom InputTypes

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountRoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PesquisadoresWhereInput
  }



  /**
   * Count Type CandidatoCountOutputType
   */

  export type CandidatoCountOutputType = {
    images: number
    votos: number
  }

  export type CandidatoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | CandidatoCountOutputTypeCountImagesArgs
    votos?: boolean | CandidatoCountOutputTypeCountVotosArgs
  }

  // Custom InputTypes

  /**
   * CandidatoCountOutputType without action
   */
  export type CandidatoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatoCountOutputType
     */
    select?: CandidatoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CandidatoCountOutputType without action
   */
  export type CandidatoCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImagesWhereInput
  }


  /**
   * CandidatoCountOutputType without action
   */
  export type CandidatoCountOutputTypeCountVotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VotosWhereInput
  }



  /**
   * Count Type MunicipioCountOutputType
   */

  export type MunicipioCountOutputType = {
    candidato: number
  }

  export type MunicipioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidato?: boolean | MunicipioCountOutputTypeCountCandidatoArgs
  }

  // Custom InputTypes

  /**
   * MunicipioCountOutputType without action
   */
  export type MunicipioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MunicipioCountOutputType
     */
    select?: MunicipioCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * MunicipioCountOutputType without action
   */
  export type MunicipioCountOutputTypeCountCandidatoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidatoWhereInput
  }



  /**
   * Count Type EstadoCountOutputType
   */

  export type EstadoCountOutputType = {
    candidato: number
  }

  export type EstadoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidato?: boolean | EstadoCountOutputTypeCountCandidatoArgs
  }

  // Custom InputTypes

  /**
   * EstadoCountOutputType without action
   */
  export type EstadoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstadoCountOutputType
     */
    select?: EstadoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EstadoCountOutputType without action
   */
  export type EstadoCountOutputTypeCountCandidatoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidatoWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Pesquisadores
   */

  export type AggregatePesquisadores = {
    _count: PesquisadoresCountAggregateOutputType | null
    _avg: PesquisadoresAvgAggregateOutputType | null
    _sum: PesquisadoresSumAggregateOutputType | null
    _min: PesquisadoresMinAggregateOutputType | null
    _max: PesquisadoresMaxAggregateOutputType | null
  }

  export type PesquisadoresAvgAggregateOutputType = {
    id_Pesquisador: number | null
    roleId: number | null
  }

  export type PesquisadoresSumAggregateOutputType = {
    id_Pesquisador: number | null
    roleId: number | null
  }

  export type PesquisadoresMinAggregateOutputType = {
    id_Pesquisador: number | null
    email: string | null
    name: string | null
    cpf: string | null
    senha: string | null
    createdAt: Date | null
    updatedAt: Date | null
    roleId: number | null
  }

  export type PesquisadoresMaxAggregateOutputType = {
    id_Pesquisador: number | null
    email: string | null
    name: string | null
    cpf: string | null
    senha: string | null
    createdAt: Date | null
    updatedAt: Date | null
    roleId: number | null
  }

  export type PesquisadoresCountAggregateOutputType = {
    id_Pesquisador: number
    email: number
    name: number
    cpf: number
    senha: number
    createdAt: number
    updatedAt: number
    roleId: number
    _all: number
  }


  export type PesquisadoresAvgAggregateInputType = {
    id_Pesquisador?: true
    roleId?: true
  }

  export type PesquisadoresSumAggregateInputType = {
    id_Pesquisador?: true
    roleId?: true
  }

  export type PesquisadoresMinAggregateInputType = {
    id_Pesquisador?: true
    email?: true
    name?: true
    cpf?: true
    senha?: true
    createdAt?: true
    updatedAt?: true
    roleId?: true
  }

  export type PesquisadoresMaxAggregateInputType = {
    id_Pesquisador?: true
    email?: true
    name?: true
    cpf?: true
    senha?: true
    createdAt?: true
    updatedAt?: true
    roleId?: true
  }

  export type PesquisadoresCountAggregateInputType = {
    id_Pesquisador?: true
    email?: true
    name?: true
    cpf?: true
    senha?: true
    createdAt?: true
    updatedAt?: true
    roleId?: true
    _all?: true
  }

  export type PesquisadoresAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pesquisadores to aggregate.
     */
    where?: PesquisadoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pesquisadores to fetch.
     */
    orderBy?: PesquisadoresOrderByWithRelationInput | PesquisadoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PesquisadoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pesquisadores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pesquisadores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pesquisadores
    **/
    _count?: true | PesquisadoresCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PesquisadoresAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PesquisadoresSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PesquisadoresMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PesquisadoresMaxAggregateInputType
  }

  export type GetPesquisadoresAggregateType<T extends PesquisadoresAggregateArgs> = {
        [P in keyof T & keyof AggregatePesquisadores]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePesquisadores[P]>
      : GetScalarType<T[P], AggregatePesquisadores[P]>
  }




  export type PesquisadoresGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PesquisadoresWhereInput
    orderBy?: PesquisadoresOrderByWithAggregationInput | PesquisadoresOrderByWithAggregationInput[]
    by: PesquisadoresScalarFieldEnum[] | PesquisadoresScalarFieldEnum
    having?: PesquisadoresScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PesquisadoresCountAggregateInputType | true
    _avg?: PesquisadoresAvgAggregateInputType
    _sum?: PesquisadoresSumAggregateInputType
    _min?: PesquisadoresMinAggregateInputType
    _max?: PesquisadoresMaxAggregateInputType
  }

  export type PesquisadoresGroupByOutputType = {
    id_Pesquisador: number
    email: string
    name: string
    cpf: string
    senha: string
    createdAt: Date
    updatedAt: Date
    roleId: number
    _count: PesquisadoresCountAggregateOutputType | null
    _avg: PesquisadoresAvgAggregateOutputType | null
    _sum: PesquisadoresSumAggregateOutputType | null
    _min: PesquisadoresMinAggregateOutputType | null
    _max: PesquisadoresMaxAggregateOutputType | null
  }

  type GetPesquisadoresGroupByPayload<T extends PesquisadoresGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PesquisadoresGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PesquisadoresGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PesquisadoresGroupByOutputType[P]>
            : GetScalarType<T[P], PesquisadoresGroupByOutputType[P]>
        }
      >
    >


  export type PesquisadoresSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_Pesquisador?: boolean
    email?: boolean
    name?: boolean
    cpf?: boolean
    senha?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    roleId?: boolean
    Roles?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pesquisadores"]>

  export type PesquisadoresSelectScalar = {
    id_Pesquisador?: boolean
    email?: boolean
    name?: boolean
    cpf?: boolean
    senha?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    roleId?: boolean
  }

  export type PesquisadoresInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Roles?: boolean | RoleDefaultArgs<ExtArgs>
  }


  export type $PesquisadoresPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pesquisadores"
    objects: {
      Roles: Prisma.$RolePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_Pesquisador: number
      email: string
      name: string
      cpf: string
      senha: string
      createdAt: Date
      updatedAt: Date
      roleId: number
    }, ExtArgs["result"]["pesquisadores"]>
    composites: {}
  }


  type PesquisadoresGetPayload<S extends boolean | null | undefined | PesquisadoresDefaultArgs> = $Result.GetResult<Prisma.$PesquisadoresPayload, S>

  type PesquisadoresCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PesquisadoresFindManyArgs, 'select' | 'include'> & {
      select?: PesquisadoresCountAggregateInputType | true
    }

  export interface PesquisadoresDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pesquisadores'], meta: { name: 'Pesquisadores' } }
    /**
     * Find zero or one Pesquisadores that matches the filter.
     * @param {PesquisadoresFindUniqueArgs} args - Arguments to find a Pesquisadores
     * @example
     * // Get one Pesquisadores
     * const pesquisadores = await prisma.pesquisadores.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PesquisadoresFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PesquisadoresFindUniqueArgs<ExtArgs>>
    ): Prisma__PesquisadoresClient<$Result.GetResult<Prisma.$PesquisadoresPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Pesquisadores that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PesquisadoresFindUniqueOrThrowArgs} args - Arguments to find a Pesquisadores
     * @example
     * // Get one Pesquisadores
     * const pesquisadores = await prisma.pesquisadores.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PesquisadoresFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PesquisadoresFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PesquisadoresClient<$Result.GetResult<Prisma.$PesquisadoresPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Pesquisadores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PesquisadoresFindFirstArgs} args - Arguments to find a Pesquisadores
     * @example
     * // Get one Pesquisadores
     * const pesquisadores = await prisma.pesquisadores.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PesquisadoresFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PesquisadoresFindFirstArgs<ExtArgs>>
    ): Prisma__PesquisadoresClient<$Result.GetResult<Prisma.$PesquisadoresPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Pesquisadores that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PesquisadoresFindFirstOrThrowArgs} args - Arguments to find a Pesquisadores
     * @example
     * // Get one Pesquisadores
     * const pesquisadores = await prisma.pesquisadores.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PesquisadoresFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PesquisadoresFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PesquisadoresClient<$Result.GetResult<Prisma.$PesquisadoresPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Pesquisadores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PesquisadoresFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pesquisadores
     * const pesquisadores = await prisma.pesquisadores.findMany()
     * 
     * // Get first 10 Pesquisadores
     * const pesquisadores = await prisma.pesquisadores.findMany({ take: 10 })
     * 
     * // Only select the `id_Pesquisador`
     * const pesquisadoresWithId_PesquisadorOnly = await prisma.pesquisadores.findMany({ select: { id_Pesquisador: true } })
     * 
    **/
    findMany<T extends PesquisadoresFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PesquisadoresFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PesquisadoresPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Pesquisadores.
     * @param {PesquisadoresCreateArgs} args - Arguments to create a Pesquisadores.
     * @example
     * // Create one Pesquisadores
     * const Pesquisadores = await prisma.pesquisadores.create({
     *   data: {
     *     // ... data to create a Pesquisadores
     *   }
     * })
     * 
    **/
    create<T extends PesquisadoresCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PesquisadoresCreateArgs<ExtArgs>>
    ): Prisma__PesquisadoresClient<$Result.GetResult<Prisma.$PesquisadoresPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Pesquisadores.
     *     @param {PesquisadoresCreateManyArgs} args - Arguments to create many Pesquisadores.
     *     @example
     *     // Create many Pesquisadores
     *     const pesquisadores = await prisma.pesquisadores.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PesquisadoresCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PesquisadoresCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pesquisadores.
     * @param {PesquisadoresDeleteArgs} args - Arguments to delete one Pesquisadores.
     * @example
     * // Delete one Pesquisadores
     * const Pesquisadores = await prisma.pesquisadores.delete({
     *   where: {
     *     // ... filter to delete one Pesquisadores
     *   }
     * })
     * 
    **/
    delete<T extends PesquisadoresDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PesquisadoresDeleteArgs<ExtArgs>>
    ): Prisma__PesquisadoresClient<$Result.GetResult<Prisma.$PesquisadoresPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Pesquisadores.
     * @param {PesquisadoresUpdateArgs} args - Arguments to update one Pesquisadores.
     * @example
     * // Update one Pesquisadores
     * const pesquisadores = await prisma.pesquisadores.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PesquisadoresUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PesquisadoresUpdateArgs<ExtArgs>>
    ): Prisma__PesquisadoresClient<$Result.GetResult<Prisma.$PesquisadoresPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Pesquisadores.
     * @param {PesquisadoresDeleteManyArgs} args - Arguments to filter Pesquisadores to delete.
     * @example
     * // Delete a few Pesquisadores
     * const { count } = await prisma.pesquisadores.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PesquisadoresDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PesquisadoresDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pesquisadores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PesquisadoresUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pesquisadores
     * const pesquisadores = await prisma.pesquisadores.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PesquisadoresUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PesquisadoresUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pesquisadores.
     * @param {PesquisadoresUpsertArgs} args - Arguments to update or create a Pesquisadores.
     * @example
     * // Update or create a Pesquisadores
     * const pesquisadores = await prisma.pesquisadores.upsert({
     *   create: {
     *     // ... data to create a Pesquisadores
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pesquisadores we want to update
     *   }
     * })
    **/
    upsert<T extends PesquisadoresUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PesquisadoresUpsertArgs<ExtArgs>>
    ): Prisma__PesquisadoresClient<$Result.GetResult<Prisma.$PesquisadoresPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Pesquisadores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PesquisadoresCountArgs} args - Arguments to filter Pesquisadores to count.
     * @example
     * // Count the number of Pesquisadores
     * const count = await prisma.pesquisadores.count({
     *   where: {
     *     // ... the filter for the Pesquisadores we want to count
     *   }
     * })
    **/
    count<T extends PesquisadoresCountArgs>(
      args?: Subset<T, PesquisadoresCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PesquisadoresCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pesquisadores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PesquisadoresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PesquisadoresAggregateArgs>(args: Subset<T, PesquisadoresAggregateArgs>): Prisma.PrismaPromise<GetPesquisadoresAggregateType<T>>

    /**
     * Group by Pesquisadores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PesquisadoresGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PesquisadoresGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PesquisadoresGroupByArgs['orderBy'] }
        : { orderBy?: PesquisadoresGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PesquisadoresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPesquisadoresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pesquisadores model
   */
  readonly fields: PesquisadoresFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pesquisadores.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PesquisadoresClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Roles<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Pesquisadores model
   */ 
  interface PesquisadoresFieldRefs {
    readonly id_Pesquisador: FieldRef<"Pesquisadores", 'Int'>
    readonly email: FieldRef<"Pesquisadores", 'String'>
    readonly name: FieldRef<"Pesquisadores", 'String'>
    readonly cpf: FieldRef<"Pesquisadores", 'String'>
    readonly senha: FieldRef<"Pesquisadores", 'String'>
    readonly createdAt: FieldRef<"Pesquisadores", 'DateTime'>
    readonly updatedAt: FieldRef<"Pesquisadores", 'DateTime'>
    readonly roleId: FieldRef<"Pesquisadores", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Pesquisadores findUnique
   */
  export type PesquisadoresFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesquisadores
     */
    select?: PesquisadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PesquisadoresInclude<ExtArgs> | null
    /**
     * Filter, which Pesquisadores to fetch.
     */
    where: PesquisadoresWhereUniqueInput
  }


  /**
   * Pesquisadores findUniqueOrThrow
   */
  export type PesquisadoresFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesquisadores
     */
    select?: PesquisadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PesquisadoresInclude<ExtArgs> | null
    /**
     * Filter, which Pesquisadores to fetch.
     */
    where: PesquisadoresWhereUniqueInput
  }


  /**
   * Pesquisadores findFirst
   */
  export type PesquisadoresFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesquisadores
     */
    select?: PesquisadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PesquisadoresInclude<ExtArgs> | null
    /**
     * Filter, which Pesquisadores to fetch.
     */
    where?: PesquisadoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pesquisadores to fetch.
     */
    orderBy?: PesquisadoresOrderByWithRelationInput | PesquisadoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pesquisadores.
     */
    cursor?: PesquisadoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pesquisadores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pesquisadores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pesquisadores.
     */
    distinct?: PesquisadoresScalarFieldEnum | PesquisadoresScalarFieldEnum[]
  }


  /**
   * Pesquisadores findFirstOrThrow
   */
  export type PesquisadoresFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesquisadores
     */
    select?: PesquisadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PesquisadoresInclude<ExtArgs> | null
    /**
     * Filter, which Pesquisadores to fetch.
     */
    where?: PesquisadoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pesquisadores to fetch.
     */
    orderBy?: PesquisadoresOrderByWithRelationInput | PesquisadoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pesquisadores.
     */
    cursor?: PesquisadoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pesquisadores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pesquisadores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pesquisadores.
     */
    distinct?: PesquisadoresScalarFieldEnum | PesquisadoresScalarFieldEnum[]
  }


  /**
   * Pesquisadores findMany
   */
  export type PesquisadoresFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesquisadores
     */
    select?: PesquisadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PesquisadoresInclude<ExtArgs> | null
    /**
     * Filter, which Pesquisadores to fetch.
     */
    where?: PesquisadoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pesquisadores to fetch.
     */
    orderBy?: PesquisadoresOrderByWithRelationInput | PesquisadoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pesquisadores.
     */
    cursor?: PesquisadoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pesquisadores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pesquisadores.
     */
    skip?: number
    distinct?: PesquisadoresScalarFieldEnum | PesquisadoresScalarFieldEnum[]
  }


  /**
   * Pesquisadores create
   */
  export type PesquisadoresCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesquisadores
     */
    select?: PesquisadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PesquisadoresInclude<ExtArgs> | null
    /**
     * The data needed to create a Pesquisadores.
     */
    data: XOR<PesquisadoresCreateInput, PesquisadoresUncheckedCreateInput>
  }


  /**
   * Pesquisadores createMany
   */
  export type PesquisadoresCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pesquisadores.
     */
    data: PesquisadoresCreateManyInput | PesquisadoresCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Pesquisadores update
   */
  export type PesquisadoresUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesquisadores
     */
    select?: PesquisadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PesquisadoresInclude<ExtArgs> | null
    /**
     * The data needed to update a Pesquisadores.
     */
    data: XOR<PesquisadoresUpdateInput, PesquisadoresUncheckedUpdateInput>
    /**
     * Choose, which Pesquisadores to update.
     */
    where: PesquisadoresWhereUniqueInput
  }


  /**
   * Pesquisadores updateMany
   */
  export type PesquisadoresUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pesquisadores.
     */
    data: XOR<PesquisadoresUpdateManyMutationInput, PesquisadoresUncheckedUpdateManyInput>
    /**
     * Filter which Pesquisadores to update
     */
    where?: PesquisadoresWhereInput
  }


  /**
   * Pesquisadores upsert
   */
  export type PesquisadoresUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesquisadores
     */
    select?: PesquisadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PesquisadoresInclude<ExtArgs> | null
    /**
     * The filter to search for the Pesquisadores to update in case it exists.
     */
    where: PesquisadoresWhereUniqueInput
    /**
     * In case the Pesquisadores found by the `where` argument doesn't exist, create a new Pesquisadores with this data.
     */
    create: XOR<PesquisadoresCreateInput, PesquisadoresUncheckedCreateInput>
    /**
     * In case the Pesquisadores was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PesquisadoresUpdateInput, PesquisadoresUncheckedUpdateInput>
  }


  /**
   * Pesquisadores delete
   */
  export type PesquisadoresDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesquisadores
     */
    select?: PesquisadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PesquisadoresInclude<ExtArgs> | null
    /**
     * Filter which Pesquisadores to delete.
     */
    where: PesquisadoresWhereUniqueInput
  }


  /**
   * Pesquisadores deleteMany
   */
  export type PesquisadoresDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pesquisadores to delete
     */
    where?: PesquisadoresWhereInput
  }


  /**
   * Pesquisadores without action
   */
  export type PesquisadoresDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesquisadores
     */
    select?: PesquisadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PesquisadoresInclude<ExtArgs> | null
  }



  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    Role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    Role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    Role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    Role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    Role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    Role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: number
    Role: string
    createdAt: Date
    updatedAt: Date
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean | Role$roleArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id?: boolean
    Role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | Role$roleArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      role: Prisma.$PesquisadoresPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Role: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["role"]>
    composites: {}
  }


  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoleFindManyArgs, 'select' | 'include'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RoleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
    **/
    create<T extends RoleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RoleCreateArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Roles.
     *     @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     *     @example
     *     // Create many Roles
     *     const role = await prisma.role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
    **/
    delete<T extends RoleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
    **/
    upsert<T extends RoleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    role<T extends Role$roleArgs<ExtArgs> = {}>(args?: Subset<T, Role$roleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PesquisadoresPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Role model
   */ 
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'Int'>
    readonly Role: FieldRef<"Role", 'String'>
    readonly createdAt: FieldRef<"Role", 'DateTime'>
    readonly updatedAt: FieldRef<"Role", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }


  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }


  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }


  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }


  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }


  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }


  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }


  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
  }


  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }


  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }


  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
  }


  /**
   * Role.role
   */
  export type Role$roleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pesquisadores
     */
    select?: PesquisadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PesquisadoresInclude<ExtArgs> | null
    where?: PesquisadoresWhereInput
    orderBy?: PesquisadoresOrderByWithRelationInput | PesquisadoresOrderByWithRelationInput[]
    cursor?: PesquisadoresWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PesquisadoresScalarFieldEnum | PesquisadoresScalarFieldEnum[]
  }


  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
  }



  /**
   * Model Candidato
   */

  export type AggregateCandidato = {
    _count: CandidatoCountAggregateOutputType | null
    _avg: CandidatoAvgAggregateOutputType | null
    _sum: CandidatoSumAggregateOutputType | null
    _min: CandidatoMinAggregateOutputType | null
    _max: CandidatoMaxAggregateOutputType | null
  }

  export type CandidatoAvgAggregateOutputType = {
    id_candidato: number | null
    estado_id: number | null
    municipio_id: number | null
  }

  export type CandidatoSumAggregateOutputType = {
    id_candidato: number | null
    estado_id: number | null
    municipio_id: number | null
  }

  export type CandidatoMinAggregateOutputType = {
    id_candidato: number | null
    name: string | null
    apelido: string | null
    estado_id: number | null
    municipio_id: number | null
  }

  export type CandidatoMaxAggregateOutputType = {
    id_candidato: number | null
    name: string | null
    apelido: string | null
    estado_id: number | null
    municipio_id: number | null
  }

  export type CandidatoCountAggregateOutputType = {
    id_candidato: number
    name: number
    apelido: number
    estado_id: number
    municipio_id: number
    _all: number
  }


  export type CandidatoAvgAggregateInputType = {
    id_candidato?: true
    estado_id?: true
    municipio_id?: true
  }

  export type CandidatoSumAggregateInputType = {
    id_candidato?: true
    estado_id?: true
    municipio_id?: true
  }

  export type CandidatoMinAggregateInputType = {
    id_candidato?: true
    name?: true
    apelido?: true
    estado_id?: true
    municipio_id?: true
  }

  export type CandidatoMaxAggregateInputType = {
    id_candidato?: true
    name?: true
    apelido?: true
    estado_id?: true
    municipio_id?: true
  }

  export type CandidatoCountAggregateInputType = {
    id_candidato?: true
    name?: true
    apelido?: true
    estado_id?: true
    municipio_id?: true
    _all?: true
  }

  export type CandidatoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidato to aggregate.
     */
    where?: CandidatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidatoes to fetch.
     */
    orderBy?: CandidatoOrderByWithRelationInput | CandidatoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CandidatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidatoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidatoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Candidatoes
    **/
    _count?: true | CandidatoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CandidatoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CandidatoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidatoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidatoMaxAggregateInputType
  }

  export type GetCandidatoAggregateType<T extends CandidatoAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidato]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidato[P]>
      : GetScalarType<T[P], AggregateCandidato[P]>
  }




  export type CandidatoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidatoWhereInput
    orderBy?: CandidatoOrderByWithAggregationInput | CandidatoOrderByWithAggregationInput[]
    by: CandidatoScalarFieldEnum[] | CandidatoScalarFieldEnum
    having?: CandidatoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidatoCountAggregateInputType | true
    _avg?: CandidatoAvgAggregateInputType
    _sum?: CandidatoSumAggregateInputType
    _min?: CandidatoMinAggregateInputType
    _max?: CandidatoMaxAggregateInputType
  }

  export type CandidatoGroupByOutputType = {
    id_candidato: number
    name: string
    apelido: string | null
    estado_id: number
    municipio_id: number
    _count: CandidatoCountAggregateOutputType | null
    _avg: CandidatoAvgAggregateOutputType | null
    _sum: CandidatoSumAggregateOutputType | null
    _min: CandidatoMinAggregateOutputType | null
    _max: CandidatoMaxAggregateOutputType | null
  }

  type GetCandidatoGroupByPayload<T extends CandidatoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CandidatoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidatoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidatoGroupByOutputType[P]>
            : GetScalarType<T[P], CandidatoGroupByOutputType[P]>
        }
      >
    >


  export type CandidatoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_candidato?: boolean
    name?: boolean
    apelido?: boolean
    estado_id?: boolean
    municipio_id?: boolean
    estado?: boolean | EstadoDefaultArgs<ExtArgs>
    Municipio?: boolean | municipioDefaultArgs<ExtArgs>
    images?: boolean | Candidato$imagesArgs<ExtArgs>
    votos?: boolean | Candidato$votosArgs<ExtArgs>
    _count?: boolean | CandidatoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidato"]>

  export type CandidatoSelectScalar = {
    id_candidato?: boolean
    name?: boolean
    apelido?: boolean
    estado_id?: boolean
    municipio_id?: boolean
  }

  export type CandidatoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    estado?: boolean | EstadoDefaultArgs<ExtArgs>
    Municipio?: boolean | municipioDefaultArgs<ExtArgs>
    images?: boolean | Candidato$imagesArgs<ExtArgs>
    votos?: boolean | Candidato$votosArgs<ExtArgs>
    _count?: boolean | CandidatoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CandidatoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Candidato"
    objects: {
      estado: Prisma.$EstadoPayload<ExtArgs>
      Municipio: Prisma.$municipioPayload<ExtArgs>
      images: Prisma.$ImagesPayload<ExtArgs>[]
      votos: Prisma.$VotosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_candidato: number
      name: string
      apelido: string | null
      estado_id: number
      municipio_id: number
    }, ExtArgs["result"]["candidato"]>
    composites: {}
  }


  type CandidatoGetPayload<S extends boolean | null | undefined | CandidatoDefaultArgs> = $Result.GetResult<Prisma.$CandidatoPayload, S>

  type CandidatoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CandidatoFindManyArgs, 'select' | 'include'> & {
      select?: CandidatoCountAggregateInputType | true
    }

  export interface CandidatoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Candidato'], meta: { name: 'Candidato' } }
    /**
     * Find zero or one Candidato that matches the filter.
     * @param {CandidatoFindUniqueArgs} args - Arguments to find a Candidato
     * @example
     * // Get one Candidato
     * const candidato = await prisma.candidato.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CandidatoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CandidatoFindUniqueArgs<ExtArgs>>
    ): Prisma__CandidatoClient<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Candidato that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CandidatoFindUniqueOrThrowArgs} args - Arguments to find a Candidato
     * @example
     * // Get one Candidato
     * const candidato = await prisma.candidato.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CandidatoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidatoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CandidatoClient<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Candidato that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoFindFirstArgs} args - Arguments to find a Candidato
     * @example
     * // Get one Candidato
     * const candidato = await prisma.candidato.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CandidatoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidatoFindFirstArgs<ExtArgs>>
    ): Prisma__CandidatoClient<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Candidato that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoFindFirstOrThrowArgs} args - Arguments to find a Candidato
     * @example
     * // Get one Candidato
     * const candidato = await prisma.candidato.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CandidatoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidatoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CandidatoClient<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Candidatoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Candidatoes
     * const candidatoes = await prisma.candidato.findMany()
     * 
     * // Get first 10 Candidatoes
     * const candidatoes = await prisma.candidato.findMany({ take: 10 })
     * 
     * // Only select the `id_candidato`
     * const candidatoWithId_candidatoOnly = await prisma.candidato.findMany({ select: { id_candidato: true } })
     * 
    **/
    findMany<T extends CandidatoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidatoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Candidato.
     * @param {CandidatoCreateArgs} args - Arguments to create a Candidato.
     * @example
     * // Create one Candidato
     * const Candidato = await prisma.candidato.create({
     *   data: {
     *     // ... data to create a Candidato
     *   }
     * })
     * 
    **/
    create<T extends CandidatoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CandidatoCreateArgs<ExtArgs>>
    ): Prisma__CandidatoClient<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Candidatoes.
     *     @param {CandidatoCreateManyArgs} args - Arguments to create many Candidatoes.
     *     @example
     *     // Create many Candidatoes
     *     const candidato = await prisma.candidato.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CandidatoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidatoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Candidato.
     * @param {CandidatoDeleteArgs} args - Arguments to delete one Candidato.
     * @example
     * // Delete one Candidato
     * const Candidato = await prisma.candidato.delete({
     *   where: {
     *     // ... filter to delete one Candidato
     *   }
     * })
     * 
    **/
    delete<T extends CandidatoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CandidatoDeleteArgs<ExtArgs>>
    ): Prisma__CandidatoClient<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Candidato.
     * @param {CandidatoUpdateArgs} args - Arguments to update one Candidato.
     * @example
     * // Update one Candidato
     * const candidato = await prisma.candidato.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CandidatoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CandidatoUpdateArgs<ExtArgs>>
    ): Prisma__CandidatoClient<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Candidatoes.
     * @param {CandidatoDeleteManyArgs} args - Arguments to filter Candidatoes to delete.
     * @example
     * // Delete a few Candidatoes
     * const { count } = await prisma.candidato.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CandidatoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CandidatoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Candidatoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Candidatoes
     * const candidato = await prisma.candidato.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CandidatoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CandidatoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Candidato.
     * @param {CandidatoUpsertArgs} args - Arguments to update or create a Candidato.
     * @example
     * // Update or create a Candidato
     * const candidato = await prisma.candidato.upsert({
     *   create: {
     *     // ... data to create a Candidato
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Candidato we want to update
     *   }
     * })
    **/
    upsert<T extends CandidatoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CandidatoUpsertArgs<ExtArgs>>
    ): Prisma__CandidatoClient<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Candidatoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoCountArgs} args - Arguments to filter Candidatoes to count.
     * @example
     * // Count the number of Candidatoes
     * const count = await prisma.candidato.count({
     *   where: {
     *     // ... the filter for the Candidatoes we want to count
     *   }
     * })
    **/
    count<T extends CandidatoCountArgs>(
      args?: Subset<T, CandidatoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidatoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Candidato.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidatoAggregateArgs>(args: Subset<T, CandidatoAggregateArgs>): Prisma.PrismaPromise<GetCandidatoAggregateType<T>>

    /**
     * Group by Candidato.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidatoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidatoGroupByArgs['orderBy'] }
        : { orderBy?: CandidatoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidatoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidatoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Candidato model
   */
  readonly fields: CandidatoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Candidato.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CandidatoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    estado<T extends EstadoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EstadoDefaultArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Municipio<T extends municipioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, municipioDefaultArgs<ExtArgs>>): Prisma__municipioClient<$Result.GetResult<Prisma.$municipioPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    images<T extends Candidato$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Candidato$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagesPayload<ExtArgs>, T, 'findMany'> | Null>;

    votos<T extends Candidato$votosArgs<ExtArgs> = {}>(args?: Subset<T, Candidato$votosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotosPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Candidato model
   */ 
  interface CandidatoFieldRefs {
    readonly id_candidato: FieldRef<"Candidato", 'Int'>
    readonly name: FieldRef<"Candidato", 'String'>
    readonly apelido: FieldRef<"Candidato", 'String'>
    readonly estado_id: FieldRef<"Candidato", 'Int'>
    readonly municipio_id: FieldRef<"Candidato", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Candidato findUnique
   */
  export type CandidatoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatoInclude<ExtArgs> | null
    /**
     * Filter, which Candidato to fetch.
     */
    where: CandidatoWhereUniqueInput
  }


  /**
   * Candidato findUniqueOrThrow
   */
  export type CandidatoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatoInclude<ExtArgs> | null
    /**
     * Filter, which Candidato to fetch.
     */
    where: CandidatoWhereUniqueInput
  }


  /**
   * Candidato findFirst
   */
  export type CandidatoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatoInclude<ExtArgs> | null
    /**
     * Filter, which Candidato to fetch.
     */
    where?: CandidatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidatoes to fetch.
     */
    orderBy?: CandidatoOrderByWithRelationInput | CandidatoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidatoes.
     */
    cursor?: CandidatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidatoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidatoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidatoes.
     */
    distinct?: CandidatoScalarFieldEnum | CandidatoScalarFieldEnum[]
  }


  /**
   * Candidato findFirstOrThrow
   */
  export type CandidatoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatoInclude<ExtArgs> | null
    /**
     * Filter, which Candidato to fetch.
     */
    where?: CandidatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidatoes to fetch.
     */
    orderBy?: CandidatoOrderByWithRelationInput | CandidatoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidatoes.
     */
    cursor?: CandidatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidatoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidatoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidatoes.
     */
    distinct?: CandidatoScalarFieldEnum | CandidatoScalarFieldEnum[]
  }


  /**
   * Candidato findMany
   */
  export type CandidatoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatoInclude<ExtArgs> | null
    /**
     * Filter, which Candidatoes to fetch.
     */
    where?: CandidatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidatoes to fetch.
     */
    orderBy?: CandidatoOrderByWithRelationInput | CandidatoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Candidatoes.
     */
    cursor?: CandidatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidatoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidatoes.
     */
    skip?: number
    distinct?: CandidatoScalarFieldEnum | CandidatoScalarFieldEnum[]
  }


  /**
   * Candidato create
   */
  export type CandidatoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatoInclude<ExtArgs> | null
    /**
     * The data needed to create a Candidato.
     */
    data: XOR<CandidatoCreateInput, CandidatoUncheckedCreateInput>
  }


  /**
   * Candidato createMany
   */
  export type CandidatoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Candidatoes.
     */
    data: CandidatoCreateManyInput | CandidatoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Candidato update
   */
  export type CandidatoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatoInclude<ExtArgs> | null
    /**
     * The data needed to update a Candidato.
     */
    data: XOR<CandidatoUpdateInput, CandidatoUncheckedUpdateInput>
    /**
     * Choose, which Candidato to update.
     */
    where: CandidatoWhereUniqueInput
  }


  /**
   * Candidato updateMany
   */
  export type CandidatoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Candidatoes.
     */
    data: XOR<CandidatoUpdateManyMutationInput, CandidatoUncheckedUpdateManyInput>
    /**
     * Filter which Candidatoes to update
     */
    where?: CandidatoWhereInput
  }


  /**
   * Candidato upsert
   */
  export type CandidatoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatoInclude<ExtArgs> | null
    /**
     * The filter to search for the Candidato to update in case it exists.
     */
    where: CandidatoWhereUniqueInput
    /**
     * In case the Candidato found by the `where` argument doesn't exist, create a new Candidato with this data.
     */
    create: XOR<CandidatoCreateInput, CandidatoUncheckedCreateInput>
    /**
     * In case the Candidato was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CandidatoUpdateInput, CandidatoUncheckedUpdateInput>
  }


  /**
   * Candidato delete
   */
  export type CandidatoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatoInclude<ExtArgs> | null
    /**
     * Filter which Candidato to delete.
     */
    where: CandidatoWhereUniqueInput
  }


  /**
   * Candidato deleteMany
   */
  export type CandidatoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidatoes to delete
     */
    where?: CandidatoWhereInput
  }


  /**
   * Candidato.images
   */
  export type Candidato$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Images
     */
    select?: ImagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImagesInclude<ExtArgs> | null
    where?: ImagesWhereInput
    orderBy?: ImagesOrderByWithRelationInput | ImagesOrderByWithRelationInput[]
    cursor?: ImagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImagesScalarFieldEnum | ImagesScalarFieldEnum[]
  }


  /**
   * Candidato.votos
   */
  export type Candidato$votosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Votos
     */
    select?: VotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VotosInclude<ExtArgs> | null
    where?: VotosWhereInput
    orderBy?: VotosOrderByWithRelationInput | VotosOrderByWithRelationInput[]
    cursor?: VotosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VotosScalarFieldEnum | VotosScalarFieldEnum[]
  }


  /**
   * Candidato without action
   */
  export type CandidatoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatoInclude<ExtArgs> | null
  }



  /**
   * Model municipio
   */

  export type AggregateMunicipio = {
    _count: MunicipioCountAggregateOutputType | null
    _avg: MunicipioAvgAggregateOutputType | null
    _sum: MunicipioSumAggregateOutputType | null
    _min: MunicipioMinAggregateOutputType | null
    _max: MunicipioMaxAggregateOutputType | null
  }

  export type MunicipioAvgAggregateOutputType = {
    idMunicipio: number | null
  }

  export type MunicipioSumAggregateOutputType = {
    idMunicipio: number | null
  }

  export type MunicipioMinAggregateOutputType = {
    idMunicipio: number | null
    Municipio: string | null
  }

  export type MunicipioMaxAggregateOutputType = {
    idMunicipio: number | null
    Municipio: string | null
  }

  export type MunicipioCountAggregateOutputType = {
    idMunicipio: number
    Municipio: number
    _all: number
  }


  export type MunicipioAvgAggregateInputType = {
    idMunicipio?: true
  }

  export type MunicipioSumAggregateInputType = {
    idMunicipio?: true
  }

  export type MunicipioMinAggregateInputType = {
    idMunicipio?: true
    Municipio?: true
  }

  export type MunicipioMaxAggregateInputType = {
    idMunicipio?: true
    Municipio?: true
  }

  export type MunicipioCountAggregateInputType = {
    idMunicipio?: true
    Municipio?: true
    _all?: true
  }

  export type MunicipioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which municipio to aggregate.
     */
    where?: municipioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of municipios to fetch.
     */
    orderBy?: municipioOrderByWithRelationInput | municipioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: municipioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` municipios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` municipios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned municipios
    **/
    _count?: true | MunicipioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MunicipioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MunicipioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MunicipioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MunicipioMaxAggregateInputType
  }

  export type GetMunicipioAggregateType<T extends MunicipioAggregateArgs> = {
        [P in keyof T & keyof AggregateMunicipio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMunicipio[P]>
      : GetScalarType<T[P], AggregateMunicipio[P]>
  }




  export type municipioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: municipioWhereInput
    orderBy?: municipioOrderByWithAggregationInput | municipioOrderByWithAggregationInput[]
    by: MunicipioScalarFieldEnum[] | MunicipioScalarFieldEnum
    having?: municipioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MunicipioCountAggregateInputType | true
    _avg?: MunicipioAvgAggregateInputType
    _sum?: MunicipioSumAggregateInputType
    _min?: MunicipioMinAggregateInputType
    _max?: MunicipioMaxAggregateInputType
  }

  export type MunicipioGroupByOutputType = {
    idMunicipio: number
    Municipio: string
    _count: MunicipioCountAggregateOutputType | null
    _avg: MunicipioAvgAggregateOutputType | null
    _sum: MunicipioSumAggregateOutputType | null
    _min: MunicipioMinAggregateOutputType | null
    _max: MunicipioMaxAggregateOutputType | null
  }

  type GetMunicipioGroupByPayload<T extends municipioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MunicipioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MunicipioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MunicipioGroupByOutputType[P]>
            : GetScalarType<T[P], MunicipioGroupByOutputType[P]>
        }
      >
    >


  export type municipioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idMunicipio?: boolean
    Municipio?: boolean
    candidato?: boolean | municipio$candidatoArgs<ExtArgs>
    _count?: boolean | MunicipioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["municipio"]>

  export type municipioSelectScalar = {
    idMunicipio?: boolean
    Municipio?: boolean
  }

  export type municipioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidato?: boolean | municipio$candidatoArgs<ExtArgs>
    _count?: boolean | MunicipioCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $municipioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "municipio"
    objects: {
      candidato: Prisma.$CandidatoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idMunicipio: number
      Municipio: string
    }, ExtArgs["result"]["municipio"]>
    composites: {}
  }


  type municipioGetPayload<S extends boolean | null | undefined | municipioDefaultArgs> = $Result.GetResult<Prisma.$municipioPayload, S>

  type municipioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<municipioFindManyArgs, 'select' | 'include'> & {
      select?: MunicipioCountAggregateInputType | true
    }

  export interface municipioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['municipio'], meta: { name: 'municipio' } }
    /**
     * Find zero or one Municipio that matches the filter.
     * @param {municipioFindUniqueArgs} args - Arguments to find a Municipio
     * @example
     * // Get one Municipio
     * const municipio = await prisma.municipio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends municipioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, municipioFindUniqueArgs<ExtArgs>>
    ): Prisma__municipioClient<$Result.GetResult<Prisma.$municipioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Municipio that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {municipioFindUniqueOrThrowArgs} args - Arguments to find a Municipio
     * @example
     * // Get one Municipio
     * const municipio = await prisma.municipio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends municipioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, municipioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__municipioClient<$Result.GetResult<Prisma.$municipioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Municipio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {municipioFindFirstArgs} args - Arguments to find a Municipio
     * @example
     * // Get one Municipio
     * const municipio = await prisma.municipio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends municipioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, municipioFindFirstArgs<ExtArgs>>
    ): Prisma__municipioClient<$Result.GetResult<Prisma.$municipioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Municipio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {municipioFindFirstOrThrowArgs} args - Arguments to find a Municipio
     * @example
     * // Get one Municipio
     * const municipio = await prisma.municipio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends municipioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, municipioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__municipioClient<$Result.GetResult<Prisma.$municipioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Municipios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {municipioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Municipios
     * const municipios = await prisma.municipio.findMany()
     * 
     * // Get first 10 Municipios
     * const municipios = await prisma.municipio.findMany({ take: 10 })
     * 
     * // Only select the `idMunicipio`
     * const municipioWithIdMunicipioOnly = await prisma.municipio.findMany({ select: { idMunicipio: true } })
     * 
    **/
    findMany<T extends municipioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, municipioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$municipioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Municipio.
     * @param {municipioCreateArgs} args - Arguments to create a Municipio.
     * @example
     * // Create one Municipio
     * const Municipio = await prisma.municipio.create({
     *   data: {
     *     // ... data to create a Municipio
     *   }
     * })
     * 
    **/
    create<T extends municipioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, municipioCreateArgs<ExtArgs>>
    ): Prisma__municipioClient<$Result.GetResult<Prisma.$municipioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Municipios.
     *     @param {municipioCreateManyArgs} args - Arguments to create many Municipios.
     *     @example
     *     // Create many Municipios
     *     const municipio = await prisma.municipio.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends municipioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, municipioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Municipio.
     * @param {municipioDeleteArgs} args - Arguments to delete one Municipio.
     * @example
     * // Delete one Municipio
     * const Municipio = await prisma.municipio.delete({
     *   where: {
     *     // ... filter to delete one Municipio
     *   }
     * })
     * 
    **/
    delete<T extends municipioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, municipioDeleteArgs<ExtArgs>>
    ): Prisma__municipioClient<$Result.GetResult<Prisma.$municipioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Municipio.
     * @param {municipioUpdateArgs} args - Arguments to update one Municipio.
     * @example
     * // Update one Municipio
     * const municipio = await prisma.municipio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends municipioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, municipioUpdateArgs<ExtArgs>>
    ): Prisma__municipioClient<$Result.GetResult<Prisma.$municipioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Municipios.
     * @param {municipioDeleteManyArgs} args - Arguments to filter Municipios to delete.
     * @example
     * // Delete a few Municipios
     * const { count } = await prisma.municipio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends municipioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, municipioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Municipios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {municipioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Municipios
     * const municipio = await prisma.municipio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends municipioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, municipioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Municipio.
     * @param {municipioUpsertArgs} args - Arguments to update or create a Municipio.
     * @example
     * // Update or create a Municipio
     * const municipio = await prisma.municipio.upsert({
     *   create: {
     *     // ... data to create a Municipio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Municipio we want to update
     *   }
     * })
    **/
    upsert<T extends municipioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, municipioUpsertArgs<ExtArgs>>
    ): Prisma__municipioClient<$Result.GetResult<Prisma.$municipioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Municipios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {municipioCountArgs} args - Arguments to filter Municipios to count.
     * @example
     * // Count the number of Municipios
     * const count = await prisma.municipio.count({
     *   where: {
     *     // ... the filter for the Municipios we want to count
     *   }
     * })
    **/
    count<T extends municipioCountArgs>(
      args?: Subset<T, municipioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MunicipioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Municipio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MunicipioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MunicipioAggregateArgs>(args: Subset<T, MunicipioAggregateArgs>): Prisma.PrismaPromise<GetMunicipioAggregateType<T>>

    /**
     * Group by Municipio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {municipioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends municipioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: municipioGroupByArgs['orderBy'] }
        : { orderBy?: municipioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, municipioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMunicipioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the municipio model
   */
  readonly fields: municipioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for municipio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__municipioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    candidato<T extends municipio$candidatoArgs<ExtArgs> = {}>(args?: Subset<T, municipio$candidatoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the municipio model
   */ 
  interface municipioFieldRefs {
    readonly idMunicipio: FieldRef<"municipio", 'Int'>
    readonly Municipio: FieldRef<"municipio", 'String'>
  }
    

  // Custom InputTypes

  /**
   * municipio findUnique
   */
  export type municipioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the municipio
     */
    select?: municipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: municipioInclude<ExtArgs> | null
    /**
     * Filter, which municipio to fetch.
     */
    where: municipioWhereUniqueInput
  }


  /**
   * municipio findUniqueOrThrow
   */
  export type municipioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the municipio
     */
    select?: municipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: municipioInclude<ExtArgs> | null
    /**
     * Filter, which municipio to fetch.
     */
    where: municipioWhereUniqueInput
  }


  /**
   * municipio findFirst
   */
  export type municipioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the municipio
     */
    select?: municipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: municipioInclude<ExtArgs> | null
    /**
     * Filter, which municipio to fetch.
     */
    where?: municipioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of municipios to fetch.
     */
    orderBy?: municipioOrderByWithRelationInput | municipioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for municipios.
     */
    cursor?: municipioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` municipios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` municipios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of municipios.
     */
    distinct?: MunicipioScalarFieldEnum | MunicipioScalarFieldEnum[]
  }


  /**
   * municipio findFirstOrThrow
   */
  export type municipioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the municipio
     */
    select?: municipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: municipioInclude<ExtArgs> | null
    /**
     * Filter, which municipio to fetch.
     */
    where?: municipioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of municipios to fetch.
     */
    orderBy?: municipioOrderByWithRelationInput | municipioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for municipios.
     */
    cursor?: municipioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` municipios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` municipios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of municipios.
     */
    distinct?: MunicipioScalarFieldEnum | MunicipioScalarFieldEnum[]
  }


  /**
   * municipio findMany
   */
  export type municipioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the municipio
     */
    select?: municipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: municipioInclude<ExtArgs> | null
    /**
     * Filter, which municipios to fetch.
     */
    where?: municipioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of municipios to fetch.
     */
    orderBy?: municipioOrderByWithRelationInput | municipioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing municipios.
     */
    cursor?: municipioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` municipios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` municipios.
     */
    skip?: number
    distinct?: MunicipioScalarFieldEnum | MunicipioScalarFieldEnum[]
  }


  /**
   * municipio create
   */
  export type municipioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the municipio
     */
    select?: municipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: municipioInclude<ExtArgs> | null
    /**
     * The data needed to create a municipio.
     */
    data: XOR<municipioCreateInput, municipioUncheckedCreateInput>
  }


  /**
   * municipio createMany
   */
  export type municipioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many municipios.
     */
    data: municipioCreateManyInput | municipioCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * municipio update
   */
  export type municipioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the municipio
     */
    select?: municipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: municipioInclude<ExtArgs> | null
    /**
     * The data needed to update a municipio.
     */
    data: XOR<municipioUpdateInput, municipioUncheckedUpdateInput>
    /**
     * Choose, which municipio to update.
     */
    where: municipioWhereUniqueInput
  }


  /**
   * municipio updateMany
   */
  export type municipioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update municipios.
     */
    data: XOR<municipioUpdateManyMutationInput, municipioUncheckedUpdateManyInput>
    /**
     * Filter which municipios to update
     */
    where?: municipioWhereInput
  }


  /**
   * municipio upsert
   */
  export type municipioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the municipio
     */
    select?: municipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: municipioInclude<ExtArgs> | null
    /**
     * The filter to search for the municipio to update in case it exists.
     */
    where: municipioWhereUniqueInput
    /**
     * In case the municipio found by the `where` argument doesn't exist, create a new municipio with this data.
     */
    create: XOR<municipioCreateInput, municipioUncheckedCreateInput>
    /**
     * In case the municipio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<municipioUpdateInput, municipioUncheckedUpdateInput>
  }


  /**
   * municipio delete
   */
  export type municipioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the municipio
     */
    select?: municipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: municipioInclude<ExtArgs> | null
    /**
     * Filter which municipio to delete.
     */
    where: municipioWhereUniqueInput
  }


  /**
   * municipio deleteMany
   */
  export type municipioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which municipios to delete
     */
    where?: municipioWhereInput
  }


  /**
   * municipio.candidato
   */
  export type municipio$candidatoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatoInclude<ExtArgs> | null
    where?: CandidatoWhereInput
    orderBy?: CandidatoOrderByWithRelationInput | CandidatoOrderByWithRelationInput[]
    cursor?: CandidatoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CandidatoScalarFieldEnum | CandidatoScalarFieldEnum[]
  }


  /**
   * municipio without action
   */
  export type municipioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the municipio
     */
    select?: municipioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: municipioInclude<ExtArgs> | null
  }



  /**
   * Model Estado
   */

  export type AggregateEstado = {
    _count: EstadoCountAggregateOutputType | null
    _avg: EstadoAvgAggregateOutputType | null
    _sum: EstadoSumAggregateOutputType | null
    _min: EstadoMinAggregateOutputType | null
    _max: EstadoMaxAggregateOutputType | null
  }

  export type EstadoAvgAggregateOutputType = {
    id_Estado: number | null
  }

  export type EstadoSumAggregateOutputType = {
    id_Estado: number | null
  }

  export type EstadoMinAggregateOutputType = {
    id_Estado: number | null
    Estado: string | null
    uf: string | null
  }

  export type EstadoMaxAggregateOutputType = {
    id_Estado: number | null
    Estado: string | null
    uf: string | null
  }

  export type EstadoCountAggregateOutputType = {
    id_Estado: number
    Estado: number
    uf: number
    _all: number
  }


  export type EstadoAvgAggregateInputType = {
    id_Estado?: true
  }

  export type EstadoSumAggregateInputType = {
    id_Estado?: true
  }

  export type EstadoMinAggregateInputType = {
    id_Estado?: true
    Estado?: true
    uf?: true
  }

  export type EstadoMaxAggregateInputType = {
    id_Estado?: true
    Estado?: true
    uf?: true
  }

  export type EstadoCountAggregateInputType = {
    id_Estado?: true
    Estado?: true
    uf?: true
    _all?: true
  }

  export type EstadoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Estado to aggregate.
     */
    where?: EstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estados to fetch.
     */
    orderBy?: EstadoOrderByWithRelationInput | EstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Estados
    **/
    _count?: true | EstadoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EstadoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EstadoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EstadoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EstadoMaxAggregateInputType
  }

  export type GetEstadoAggregateType<T extends EstadoAggregateArgs> = {
        [P in keyof T & keyof AggregateEstado]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEstado[P]>
      : GetScalarType<T[P], AggregateEstado[P]>
  }




  export type EstadoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EstadoWhereInput
    orderBy?: EstadoOrderByWithAggregationInput | EstadoOrderByWithAggregationInput[]
    by: EstadoScalarFieldEnum[] | EstadoScalarFieldEnum
    having?: EstadoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EstadoCountAggregateInputType | true
    _avg?: EstadoAvgAggregateInputType
    _sum?: EstadoSumAggregateInputType
    _min?: EstadoMinAggregateInputType
    _max?: EstadoMaxAggregateInputType
  }

  export type EstadoGroupByOutputType = {
    id_Estado: number
    Estado: string
    uf: string
    _count: EstadoCountAggregateOutputType | null
    _avg: EstadoAvgAggregateOutputType | null
    _sum: EstadoSumAggregateOutputType | null
    _min: EstadoMinAggregateOutputType | null
    _max: EstadoMaxAggregateOutputType | null
  }

  type GetEstadoGroupByPayload<T extends EstadoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EstadoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EstadoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EstadoGroupByOutputType[P]>
            : GetScalarType<T[P], EstadoGroupByOutputType[P]>
        }
      >
    >


  export type EstadoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_Estado?: boolean
    Estado?: boolean
    uf?: boolean
    candidato?: boolean | Estado$candidatoArgs<ExtArgs>
    _count?: boolean | EstadoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["estado"]>

  export type EstadoSelectScalar = {
    id_Estado?: boolean
    Estado?: boolean
    uf?: boolean
  }

  export type EstadoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidato?: boolean | Estado$candidatoArgs<ExtArgs>
    _count?: boolean | EstadoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EstadoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Estado"
    objects: {
      candidato: Prisma.$CandidatoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_Estado: number
      Estado: string
      uf: string
    }, ExtArgs["result"]["estado"]>
    composites: {}
  }


  type EstadoGetPayload<S extends boolean | null | undefined | EstadoDefaultArgs> = $Result.GetResult<Prisma.$EstadoPayload, S>

  type EstadoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EstadoFindManyArgs, 'select' | 'include'> & {
      select?: EstadoCountAggregateInputType | true
    }

  export interface EstadoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Estado'], meta: { name: 'Estado' } }
    /**
     * Find zero or one Estado that matches the filter.
     * @param {EstadoFindUniqueArgs} args - Arguments to find a Estado
     * @example
     * // Get one Estado
     * const estado = await prisma.estado.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EstadoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EstadoFindUniqueArgs<ExtArgs>>
    ): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Estado that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EstadoFindUniqueOrThrowArgs} args - Arguments to find a Estado
     * @example
     * // Get one Estado
     * const estado = await prisma.estado.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EstadoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EstadoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Estado that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoFindFirstArgs} args - Arguments to find a Estado
     * @example
     * // Get one Estado
     * const estado = await prisma.estado.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EstadoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EstadoFindFirstArgs<ExtArgs>>
    ): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Estado that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoFindFirstOrThrowArgs} args - Arguments to find a Estado
     * @example
     * // Get one Estado
     * const estado = await prisma.estado.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EstadoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EstadoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Estados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Estados
     * const estados = await prisma.estado.findMany()
     * 
     * // Get first 10 Estados
     * const estados = await prisma.estado.findMany({ take: 10 })
     * 
     * // Only select the `id_Estado`
     * const estadoWithId_EstadoOnly = await prisma.estado.findMany({ select: { id_Estado: true } })
     * 
    **/
    findMany<T extends EstadoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EstadoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Estado.
     * @param {EstadoCreateArgs} args - Arguments to create a Estado.
     * @example
     * // Create one Estado
     * const Estado = await prisma.estado.create({
     *   data: {
     *     // ... data to create a Estado
     *   }
     * })
     * 
    **/
    create<T extends EstadoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EstadoCreateArgs<ExtArgs>>
    ): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Estados.
     *     @param {EstadoCreateManyArgs} args - Arguments to create many Estados.
     *     @example
     *     // Create many Estados
     *     const estado = await prisma.estado.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EstadoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EstadoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Estado.
     * @param {EstadoDeleteArgs} args - Arguments to delete one Estado.
     * @example
     * // Delete one Estado
     * const Estado = await prisma.estado.delete({
     *   where: {
     *     // ... filter to delete one Estado
     *   }
     * })
     * 
    **/
    delete<T extends EstadoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EstadoDeleteArgs<ExtArgs>>
    ): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Estado.
     * @param {EstadoUpdateArgs} args - Arguments to update one Estado.
     * @example
     * // Update one Estado
     * const estado = await prisma.estado.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EstadoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EstadoUpdateArgs<ExtArgs>>
    ): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Estados.
     * @param {EstadoDeleteManyArgs} args - Arguments to filter Estados to delete.
     * @example
     * // Delete a few Estados
     * const { count } = await prisma.estado.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EstadoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EstadoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Estados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Estados
     * const estado = await prisma.estado.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EstadoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EstadoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Estado.
     * @param {EstadoUpsertArgs} args - Arguments to update or create a Estado.
     * @example
     * // Update or create a Estado
     * const estado = await prisma.estado.upsert({
     *   create: {
     *     // ... data to create a Estado
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Estado we want to update
     *   }
     * })
    **/
    upsert<T extends EstadoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EstadoUpsertArgs<ExtArgs>>
    ): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Estados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoCountArgs} args - Arguments to filter Estados to count.
     * @example
     * // Count the number of Estados
     * const count = await prisma.estado.count({
     *   where: {
     *     // ... the filter for the Estados we want to count
     *   }
     * })
    **/
    count<T extends EstadoCountArgs>(
      args?: Subset<T, EstadoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EstadoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Estado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EstadoAggregateArgs>(args: Subset<T, EstadoAggregateArgs>): Prisma.PrismaPromise<GetEstadoAggregateType<T>>

    /**
     * Group by Estado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EstadoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EstadoGroupByArgs['orderBy'] }
        : { orderBy?: EstadoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EstadoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEstadoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Estado model
   */
  readonly fields: EstadoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Estado.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EstadoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    candidato<T extends Estado$candidatoArgs<ExtArgs> = {}>(args?: Subset<T, Estado$candidatoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Estado model
   */ 
  interface EstadoFieldRefs {
    readonly id_Estado: FieldRef<"Estado", 'Int'>
    readonly Estado: FieldRef<"Estado", 'String'>
    readonly uf: FieldRef<"Estado", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Estado findUnique
   */
  export type EstadoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estado to fetch.
     */
    where: EstadoWhereUniqueInput
  }


  /**
   * Estado findUniqueOrThrow
   */
  export type EstadoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estado to fetch.
     */
    where: EstadoWhereUniqueInput
  }


  /**
   * Estado findFirst
   */
  export type EstadoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estado to fetch.
     */
    where?: EstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estados to fetch.
     */
    orderBy?: EstadoOrderByWithRelationInput | EstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Estados.
     */
    cursor?: EstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Estados.
     */
    distinct?: EstadoScalarFieldEnum | EstadoScalarFieldEnum[]
  }


  /**
   * Estado findFirstOrThrow
   */
  export type EstadoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estado to fetch.
     */
    where?: EstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estados to fetch.
     */
    orderBy?: EstadoOrderByWithRelationInput | EstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Estados.
     */
    cursor?: EstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Estados.
     */
    distinct?: EstadoScalarFieldEnum | EstadoScalarFieldEnum[]
  }


  /**
   * Estado findMany
   */
  export type EstadoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estados to fetch.
     */
    where?: EstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estados to fetch.
     */
    orderBy?: EstadoOrderByWithRelationInput | EstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Estados.
     */
    cursor?: EstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estados.
     */
    skip?: number
    distinct?: EstadoScalarFieldEnum | EstadoScalarFieldEnum[]
  }


  /**
   * Estado create
   */
  export type EstadoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * The data needed to create a Estado.
     */
    data: XOR<EstadoCreateInput, EstadoUncheckedCreateInput>
  }


  /**
   * Estado createMany
   */
  export type EstadoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Estados.
     */
    data: EstadoCreateManyInput | EstadoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Estado update
   */
  export type EstadoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * The data needed to update a Estado.
     */
    data: XOR<EstadoUpdateInput, EstadoUncheckedUpdateInput>
    /**
     * Choose, which Estado to update.
     */
    where: EstadoWhereUniqueInput
  }


  /**
   * Estado updateMany
   */
  export type EstadoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Estados.
     */
    data: XOR<EstadoUpdateManyMutationInput, EstadoUncheckedUpdateManyInput>
    /**
     * Filter which Estados to update
     */
    where?: EstadoWhereInput
  }


  /**
   * Estado upsert
   */
  export type EstadoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * The filter to search for the Estado to update in case it exists.
     */
    where: EstadoWhereUniqueInput
    /**
     * In case the Estado found by the `where` argument doesn't exist, create a new Estado with this data.
     */
    create: XOR<EstadoCreateInput, EstadoUncheckedCreateInput>
    /**
     * In case the Estado was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EstadoUpdateInput, EstadoUncheckedUpdateInput>
  }


  /**
   * Estado delete
   */
  export type EstadoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter which Estado to delete.
     */
    where: EstadoWhereUniqueInput
  }


  /**
   * Estado deleteMany
   */
  export type EstadoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Estados to delete
     */
    where?: EstadoWhereInput
  }


  /**
   * Estado.candidato
   */
  export type Estado$candidatoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CandidatoInclude<ExtArgs> | null
    where?: CandidatoWhereInput
    orderBy?: CandidatoOrderByWithRelationInput | CandidatoOrderByWithRelationInput[]
    cursor?: CandidatoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CandidatoScalarFieldEnum | CandidatoScalarFieldEnum[]
  }


  /**
   * Estado without action
   */
  export type EstadoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EstadoInclude<ExtArgs> | null
  }



  /**
   * Model Images
   */

  export type AggregateImages = {
    _count: ImagesCountAggregateOutputType | null
    _avg: ImagesAvgAggregateOutputType | null
    _sum: ImagesSumAggregateOutputType | null
    _min: ImagesMinAggregateOutputType | null
    _max: ImagesMaxAggregateOutputType | null
  }

  export type ImagesAvgAggregateOutputType = {
    id: number | null
    FotoId: number | null
  }

  export type ImagesSumAggregateOutputType = {
    id: number | null
    FotoId: number | null
  }

  export type ImagesMinAggregateOutputType = {
    id: number | null
    Url: string | null
    FotoId: number | null
  }

  export type ImagesMaxAggregateOutputType = {
    id: number | null
    Url: string | null
    FotoId: number | null
  }

  export type ImagesCountAggregateOutputType = {
    id: number
    Url: number
    FotoId: number
    _all: number
  }


  export type ImagesAvgAggregateInputType = {
    id?: true
    FotoId?: true
  }

  export type ImagesSumAggregateInputType = {
    id?: true
    FotoId?: true
  }

  export type ImagesMinAggregateInputType = {
    id?: true
    Url?: true
    FotoId?: true
  }

  export type ImagesMaxAggregateInputType = {
    id?: true
    Url?: true
    FotoId?: true
  }

  export type ImagesCountAggregateInputType = {
    id?: true
    Url?: true
    FotoId?: true
    _all?: true
  }

  export type ImagesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Images to aggregate.
     */
    where?: ImagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImagesOrderByWithRelationInput | ImagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImagesMaxAggregateInputType
  }

  export type GetImagesAggregateType<T extends ImagesAggregateArgs> = {
        [P in keyof T & keyof AggregateImages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImages[P]>
      : GetScalarType<T[P], AggregateImages[P]>
  }




  export type ImagesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImagesWhereInput
    orderBy?: ImagesOrderByWithAggregationInput | ImagesOrderByWithAggregationInput[]
    by: ImagesScalarFieldEnum[] | ImagesScalarFieldEnum
    having?: ImagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImagesCountAggregateInputType | true
    _avg?: ImagesAvgAggregateInputType
    _sum?: ImagesSumAggregateInputType
    _min?: ImagesMinAggregateInputType
    _max?: ImagesMaxAggregateInputType
  }

  export type ImagesGroupByOutputType = {
    id: number
    Url: string
    FotoId: number
    _count: ImagesCountAggregateOutputType | null
    _avg: ImagesAvgAggregateOutputType | null
    _sum: ImagesSumAggregateOutputType | null
    _min: ImagesMinAggregateOutputType | null
    _max: ImagesMaxAggregateOutputType | null
  }

  type GetImagesGroupByPayload<T extends ImagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImagesGroupByOutputType[P]>
            : GetScalarType<T[P], ImagesGroupByOutputType[P]>
        }
      >
    >


  export type ImagesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Url?: boolean
    FotoId?: boolean
    perfil?: boolean | CandidatoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["images"]>

  export type ImagesSelectScalar = {
    id?: boolean
    Url?: boolean
    FotoId?: boolean
  }

  export type ImagesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    perfil?: boolean | CandidatoDefaultArgs<ExtArgs>
  }


  export type $ImagesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Images"
    objects: {
      perfil: Prisma.$CandidatoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Url: string
      FotoId: number
    }, ExtArgs["result"]["images"]>
    composites: {}
  }


  type ImagesGetPayload<S extends boolean | null | undefined | ImagesDefaultArgs> = $Result.GetResult<Prisma.$ImagesPayload, S>

  type ImagesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ImagesFindManyArgs, 'select' | 'include'> & {
      select?: ImagesCountAggregateInputType | true
    }

  export interface ImagesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Images'], meta: { name: 'Images' } }
    /**
     * Find zero or one Images that matches the filter.
     * @param {ImagesFindUniqueArgs} args - Arguments to find a Images
     * @example
     * // Get one Images
     * const images = await prisma.images.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ImagesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ImagesFindUniqueArgs<ExtArgs>>
    ): Prisma__ImagesClient<$Result.GetResult<Prisma.$ImagesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Images that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ImagesFindUniqueOrThrowArgs} args - Arguments to find a Images
     * @example
     * // Get one Images
     * const images = await prisma.images.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ImagesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ImagesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ImagesClient<$Result.GetResult<Prisma.$ImagesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagesFindFirstArgs} args - Arguments to find a Images
     * @example
     * // Get one Images
     * const images = await prisma.images.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ImagesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ImagesFindFirstArgs<ExtArgs>>
    ): Prisma__ImagesClient<$Result.GetResult<Prisma.$ImagesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Images that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagesFindFirstOrThrowArgs} args - Arguments to find a Images
     * @example
     * // Get one Images
     * const images = await prisma.images.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ImagesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ImagesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ImagesClient<$Result.GetResult<Prisma.$ImagesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.images.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.images.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imagesWithIdOnly = await prisma.images.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ImagesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImagesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Images.
     * @param {ImagesCreateArgs} args - Arguments to create a Images.
     * @example
     * // Create one Images
     * const Images = await prisma.images.create({
     *   data: {
     *     // ... data to create a Images
     *   }
     * })
     * 
    **/
    create<T extends ImagesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ImagesCreateArgs<ExtArgs>>
    ): Prisma__ImagesClient<$Result.GetResult<Prisma.$ImagesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Images.
     *     @param {ImagesCreateManyArgs} args - Arguments to create many Images.
     *     @example
     *     // Create many Images
     *     const images = await prisma.images.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ImagesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImagesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Images.
     * @param {ImagesDeleteArgs} args - Arguments to delete one Images.
     * @example
     * // Delete one Images
     * const Images = await prisma.images.delete({
     *   where: {
     *     // ... filter to delete one Images
     *   }
     * })
     * 
    **/
    delete<T extends ImagesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ImagesDeleteArgs<ExtArgs>>
    ): Prisma__ImagesClient<$Result.GetResult<Prisma.$ImagesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Images.
     * @param {ImagesUpdateArgs} args - Arguments to update one Images.
     * @example
     * // Update one Images
     * const images = await prisma.images.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ImagesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ImagesUpdateArgs<ExtArgs>>
    ): Prisma__ImagesClient<$Result.GetResult<Prisma.$ImagesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Images.
     * @param {ImagesDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.images.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ImagesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImagesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const images = await prisma.images.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ImagesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ImagesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Images.
     * @param {ImagesUpsertArgs} args - Arguments to update or create a Images.
     * @example
     * // Update or create a Images
     * const images = await prisma.images.upsert({
     *   create: {
     *     // ... data to create a Images
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Images we want to update
     *   }
     * })
    **/
    upsert<T extends ImagesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ImagesUpsertArgs<ExtArgs>>
    ): Prisma__ImagesClient<$Result.GetResult<Prisma.$ImagesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagesCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.images.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImagesCountArgs>(
      args?: Subset<T, ImagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImagesAggregateArgs>(args: Subset<T, ImagesAggregateArgs>): Prisma.PrismaPromise<GetImagesAggregateType<T>>

    /**
     * Group by Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImagesGroupByArgs['orderBy'] }
        : { orderBy?: ImagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Images model
   */
  readonly fields: ImagesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Images.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImagesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    perfil<T extends CandidatoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidatoDefaultArgs<ExtArgs>>): Prisma__CandidatoClient<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Images model
   */ 
  interface ImagesFieldRefs {
    readonly id: FieldRef<"Images", 'Int'>
    readonly Url: FieldRef<"Images", 'String'>
    readonly FotoId: FieldRef<"Images", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Images findUnique
   */
  export type ImagesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Images
     */
    select?: ImagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImagesInclude<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where: ImagesWhereUniqueInput
  }


  /**
   * Images findUniqueOrThrow
   */
  export type ImagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Images
     */
    select?: ImagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImagesInclude<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where: ImagesWhereUniqueInput
  }


  /**
   * Images findFirst
   */
  export type ImagesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Images
     */
    select?: ImagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImagesInclude<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where?: ImagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImagesOrderByWithRelationInput | ImagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImagesScalarFieldEnum | ImagesScalarFieldEnum[]
  }


  /**
   * Images findFirstOrThrow
   */
  export type ImagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Images
     */
    select?: ImagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImagesInclude<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where?: ImagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImagesOrderByWithRelationInput | ImagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImagesScalarFieldEnum | ImagesScalarFieldEnum[]
  }


  /**
   * Images findMany
   */
  export type ImagesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Images
     */
    select?: ImagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImagesInclude<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where?: ImagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImagesOrderByWithRelationInput | ImagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     */
    cursor?: ImagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    distinct?: ImagesScalarFieldEnum | ImagesScalarFieldEnum[]
  }


  /**
   * Images create
   */
  export type ImagesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Images
     */
    select?: ImagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImagesInclude<ExtArgs> | null
    /**
     * The data needed to create a Images.
     */
    data: XOR<ImagesCreateInput, ImagesUncheckedCreateInput>
  }


  /**
   * Images createMany
   */
  export type ImagesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Images.
     */
    data: ImagesCreateManyInput | ImagesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Images update
   */
  export type ImagesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Images
     */
    select?: ImagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImagesInclude<ExtArgs> | null
    /**
     * The data needed to update a Images.
     */
    data: XOR<ImagesUpdateInput, ImagesUncheckedUpdateInput>
    /**
     * Choose, which Images to update.
     */
    where: ImagesWhereUniqueInput
  }


  /**
   * Images updateMany
   */
  export type ImagesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Images.
     */
    data: XOR<ImagesUpdateManyMutationInput, ImagesUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImagesWhereInput
  }


  /**
   * Images upsert
   */
  export type ImagesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Images
     */
    select?: ImagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImagesInclude<ExtArgs> | null
    /**
     * The filter to search for the Images to update in case it exists.
     */
    where: ImagesWhereUniqueInput
    /**
     * In case the Images found by the `where` argument doesn't exist, create a new Images with this data.
     */
    create: XOR<ImagesCreateInput, ImagesUncheckedCreateInput>
    /**
     * In case the Images was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImagesUpdateInput, ImagesUncheckedUpdateInput>
  }


  /**
   * Images delete
   */
  export type ImagesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Images
     */
    select?: ImagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImagesInclude<ExtArgs> | null
    /**
     * Filter which Images to delete.
     */
    where: ImagesWhereUniqueInput
  }


  /**
   * Images deleteMany
   */
  export type ImagesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Images to delete
     */
    where?: ImagesWhereInput
  }


  /**
   * Images without action
   */
  export type ImagesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Images
     */
    select?: ImagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImagesInclude<ExtArgs> | null
  }



  /**
   * Model Votos
   */

  export type AggregateVotos = {
    _count: VotosCountAggregateOutputType | null
    _avg: VotosAvgAggregateOutputType | null
    _sum: VotosSumAggregateOutputType | null
    _min: VotosMinAggregateOutputType | null
    _max: VotosMaxAggregateOutputType | null
  }

  export type VotosAvgAggregateOutputType = {
    id_voto: number | null
    candidatoId: number | null
  }

  export type VotosSumAggregateOutputType = {
    id_voto: number | null
    candidatoId: number | null
  }

  export type VotosMinAggregateOutputType = {
    id_voto: number | null
    Votar: boolean | null
    candidatoId: number | null
  }

  export type VotosMaxAggregateOutputType = {
    id_voto: number | null
    Votar: boolean | null
    candidatoId: number | null
  }

  export type VotosCountAggregateOutputType = {
    id_voto: number
    Votar: number
    candidatoId: number
    _all: number
  }


  export type VotosAvgAggregateInputType = {
    id_voto?: true
    candidatoId?: true
  }

  export type VotosSumAggregateInputType = {
    id_voto?: true
    candidatoId?: true
  }

  export type VotosMinAggregateInputType = {
    id_voto?: true
    Votar?: true
    candidatoId?: true
  }

  export type VotosMaxAggregateInputType = {
    id_voto?: true
    Votar?: true
    candidatoId?: true
  }

  export type VotosCountAggregateInputType = {
    id_voto?: true
    Votar?: true
    candidatoId?: true
    _all?: true
  }

  export type VotosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Votos to aggregate.
     */
    where?: VotosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votos to fetch.
     */
    orderBy?: VotosOrderByWithRelationInput | VotosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VotosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Votos
    **/
    _count?: true | VotosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VotosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VotosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VotosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VotosMaxAggregateInputType
  }

  export type GetVotosAggregateType<T extends VotosAggregateArgs> = {
        [P in keyof T & keyof AggregateVotos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVotos[P]>
      : GetScalarType<T[P], AggregateVotos[P]>
  }




  export type VotosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VotosWhereInput
    orderBy?: VotosOrderByWithAggregationInput | VotosOrderByWithAggregationInput[]
    by: VotosScalarFieldEnum[] | VotosScalarFieldEnum
    having?: VotosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VotosCountAggregateInputType | true
    _avg?: VotosAvgAggregateInputType
    _sum?: VotosSumAggregateInputType
    _min?: VotosMinAggregateInputType
    _max?: VotosMaxAggregateInputType
  }

  export type VotosGroupByOutputType = {
    id_voto: number
    Votar: boolean
    candidatoId: number
    _count: VotosCountAggregateOutputType | null
    _avg: VotosAvgAggregateOutputType | null
    _sum: VotosSumAggregateOutputType | null
    _min: VotosMinAggregateOutputType | null
    _max: VotosMaxAggregateOutputType | null
  }

  type GetVotosGroupByPayload<T extends VotosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VotosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VotosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VotosGroupByOutputType[P]>
            : GetScalarType<T[P], VotosGroupByOutputType[P]>
        }
      >
    >


  export type VotosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_voto?: boolean
    Votar?: boolean
    candidatoId?: boolean
    candidato?: boolean | CandidatoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["votos"]>

  export type VotosSelectScalar = {
    id_voto?: boolean
    Votar?: boolean
    candidatoId?: boolean
  }

  export type VotosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidato?: boolean | CandidatoDefaultArgs<ExtArgs>
  }


  export type $VotosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Votos"
    objects: {
      candidato: Prisma.$CandidatoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_voto: number
      Votar: boolean
      candidatoId: number
    }, ExtArgs["result"]["votos"]>
    composites: {}
  }


  type VotosGetPayload<S extends boolean | null | undefined | VotosDefaultArgs> = $Result.GetResult<Prisma.$VotosPayload, S>

  type VotosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VotosFindManyArgs, 'select' | 'include'> & {
      select?: VotosCountAggregateInputType | true
    }

  export interface VotosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Votos'], meta: { name: 'Votos' } }
    /**
     * Find zero or one Votos that matches the filter.
     * @param {VotosFindUniqueArgs} args - Arguments to find a Votos
     * @example
     * // Get one Votos
     * const votos = await prisma.votos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VotosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VotosFindUniqueArgs<ExtArgs>>
    ): Prisma__VotosClient<$Result.GetResult<Prisma.$VotosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Votos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VotosFindUniqueOrThrowArgs} args - Arguments to find a Votos
     * @example
     * // Get one Votos
     * const votos = await prisma.votos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VotosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VotosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VotosClient<$Result.GetResult<Prisma.$VotosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Votos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotosFindFirstArgs} args - Arguments to find a Votos
     * @example
     * // Get one Votos
     * const votos = await prisma.votos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VotosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VotosFindFirstArgs<ExtArgs>>
    ): Prisma__VotosClient<$Result.GetResult<Prisma.$VotosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Votos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotosFindFirstOrThrowArgs} args - Arguments to find a Votos
     * @example
     * // Get one Votos
     * const votos = await prisma.votos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VotosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VotosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VotosClient<$Result.GetResult<Prisma.$VotosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Votos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Votos
     * const votos = await prisma.votos.findMany()
     * 
     * // Get first 10 Votos
     * const votos = await prisma.votos.findMany({ take: 10 })
     * 
     * // Only select the `id_voto`
     * const votosWithId_votoOnly = await prisma.votos.findMany({ select: { id_voto: true } })
     * 
    **/
    findMany<T extends VotosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VotosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Votos.
     * @param {VotosCreateArgs} args - Arguments to create a Votos.
     * @example
     * // Create one Votos
     * const Votos = await prisma.votos.create({
     *   data: {
     *     // ... data to create a Votos
     *   }
     * })
     * 
    **/
    create<T extends VotosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VotosCreateArgs<ExtArgs>>
    ): Prisma__VotosClient<$Result.GetResult<Prisma.$VotosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Votos.
     *     @param {VotosCreateManyArgs} args - Arguments to create many Votos.
     *     @example
     *     // Create many Votos
     *     const votos = await prisma.votos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VotosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VotosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Votos.
     * @param {VotosDeleteArgs} args - Arguments to delete one Votos.
     * @example
     * // Delete one Votos
     * const Votos = await prisma.votos.delete({
     *   where: {
     *     // ... filter to delete one Votos
     *   }
     * })
     * 
    **/
    delete<T extends VotosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VotosDeleteArgs<ExtArgs>>
    ): Prisma__VotosClient<$Result.GetResult<Prisma.$VotosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Votos.
     * @param {VotosUpdateArgs} args - Arguments to update one Votos.
     * @example
     * // Update one Votos
     * const votos = await prisma.votos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VotosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VotosUpdateArgs<ExtArgs>>
    ): Prisma__VotosClient<$Result.GetResult<Prisma.$VotosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Votos.
     * @param {VotosDeleteManyArgs} args - Arguments to filter Votos to delete.
     * @example
     * // Delete a few Votos
     * const { count } = await prisma.votos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VotosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VotosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Votos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Votos
     * const votos = await prisma.votos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VotosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VotosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Votos.
     * @param {VotosUpsertArgs} args - Arguments to update or create a Votos.
     * @example
     * // Update or create a Votos
     * const votos = await prisma.votos.upsert({
     *   create: {
     *     // ... data to create a Votos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Votos we want to update
     *   }
     * })
    **/
    upsert<T extends VotosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VotosUpsertArgs<ExtArgs>>
    ): Prisma__VotosClient<$Result.GetResult<Prisma.$VotosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Votos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotosCountArgs} args - Arguments to filter Votos to count.
     * @example
     * // Count the number of Votos
     * const count = await prisma.votos.count({
     *   where: {
     *     // ... the filter for the Votos we want to count
     *   }
     * })
    **/
    count<T extends VotosCountArgs>(
      args?: Subset<T, VotosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VotosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Votos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VotosAggregateArgs>(args: Subset<T, VotosAggregateArgs>): Prisma.PrismaPromise<GetVotosAggregateType<T>>

    /**
     * Group by Votos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VotosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VotosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VotosGroupByArgs['orderBy'] }
        : { orderBy?: VotosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VotosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVotosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Votos model
   */
  readonly fields: VotosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Votos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VotosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    candidato<T extends CandidatoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidatoDefaultArgs<ExtArgs>>): Prisma__CandidatoClient<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Votos model
   */ 
  interface VotosFieldRefs {
    readonly id_voto: FieldRef<"Votos", 'Int'>
    readonly Votar: FieldRef<"Votos", 'Boolean'>
    readonly candidatoId: FieldRef<"Votos", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Votos findUnique
   */
  export type VotosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Votos
     */
    select?: VotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VotosInclude<ExtArgs> | null
    /**
     * Filter, which Votos to fetch.
     */
    where: VotosWhereUniqueInput
  }


  /**
   * Votos findUniqueOrThrow
   */
  export type VotosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Votos
     */
    select?: VotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VotosInclude<ExtArgs> | null
    /**
     * Filter, which Votos to fetch.
     */
    where: VotosWhereUniqueInput
  }


  /**
   * Votos findFirst
   */
  export type VotosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Votos
     */
    select?: VotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VotosInclude<ExtArgs> | null
    /**
     * Filter, which Votos to fetch.
     */
    where?: VotosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votos to fetch.
     */
    orderBy?: VotosOrderByWithRelationInput | VotosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Votos.
     */
    cursor?: VotosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Votos.
     */
    distinct?: VotosScalarFieldEnum | VotosScalarFieldEnum[]
  }


  /**
   * Votos findFirstOrThrow
   */
  export type VotosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Votos
     */
    select?: VotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VotosInclude<ExtArgs> | null
    /**
     * Filter, which Votos to fetch.
     */
    where?: VotosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votos to fetch.
     */
    orderBy?: VotosOrderByWithRelationInput | VotosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Votos.
     */
    cursor?: VotosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Votos.
     */
    distinct?: VotosScalarFieldEnum | VotosScalarFieldEnum[]
  }


  /**
   * Votos findMany
   */
  export type VotosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Votos
     */
    select?: VotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VotosInclude<ExtArgs> | null
    /**
     * Filter, which Votos to fetch.
     */
    where?: VotosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votos to fetch.
     */
    orderBy?: VotosOrderByWithRelationInput | VotosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Votos.
     */
    cursor?: VotosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votos.
     */
    skip?: number
    distinct?: VotosScalarFieldEnum | VotosScalarFieldEnum[]
  }


  /**
   * Votos create
   */
  export type VotosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Votos
     */
    select?: VotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VotosInclude<ExtArgs> | null
    /**
     * The data needed to create a Votos.
     */
    data: XOR<VotosCreateInput, VotosUncheckedCreateInput>
  }


  /**
   * Votos createMany
   */
  export type VotosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Votos.
     */
    data: VotosCreateManyInput | VotosCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Votos update
   */
  export type VotosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Votos
     */
    select?: VotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VotosInclude<ExtArgs> | null
    /**
     * The data needed to update a Votos.
     */
    data: XOR<VotosUpdateInput, VotosUncheckedUpdateInput>
    /**
     * Choose, which Votos to update.
     */
    where: VotosWhereUniqueInput
  }


  /**
   * Votos updateMany
   */
  export type VotosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Votos.
     */
    data: XOR<VotosUpdateManyMutationInput, VotosUncheckedUpdateManyInput>
    /**
     * Filter which Votos to update
     */
    where?: VotosWhereInput
  }


  /**
   * Votos upsert
   */
  export type VotosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Votos
     */
    select?: VotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VotosInclude<ExtArgs> | null
    /**
     * The filter to search for the Votos to update in case it exists.
     */
    where: VotosWhereUniqueInput
    /**
     * In case the Votos found by the `where` argument doesn't exist, create a new Votos with this data.
     */
    create: XOR<VotosCreateInput, VotosUncheckedCreateInput>
    /**
     * In case the Votos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VotosUpdateInput, VotosUncheckedUpdateInput>
  }


  /**
   * Votos delete
   */
  export type VotosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Votos
     */
    select?: VotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VotosInclude<ExtArgs> | null
    /**
     * Filter which Votos to delete.
     */
    where: VotosWhereUniqueInput
  }


  /**
   * Votos deleteMany
   */
  export type VotosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Votos to delete
     */
    where?: VotosWhereInput
  }


  /**
   * Votos without action
   */
  export type VotosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Votos
     */
    select?: VotosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VotosInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PesquisadoresScalarFieldEnum: {
    id_Pesquisador: 'id_Pesquisador',
    email: 'email',
    name: 'name',
    cpf: 'cpf',
    senha: 'senha',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    roleId: 'roleId'
  };

  export type PesquisadoresScalarFieldEnum = (typeof PesquisadoresScalarFieldEnum)[keyof typeof PesquisadoresScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    Role: 'Role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const CandidatoScalarFieldEnum: {
    id_candidato: 'id_candidato',
    name: 'name',
    apelido: 'apelido',
    estado_id: 'estado_id',
    municipio_id: 'municipio_id'
  };

  export type CandidatoScalarFieldEnum = (typeof CandidatoScalarFieldEnum)[keyof typeof CandidatoScalarFieldEnum]


  export const MunicipioScalarFieldEnum: {
    idMunicipio: 'idMunicipio',
    Municipio: 'Municipio'
  };

  export type MunicipioScalarFieldEnum = (typeof MunicipioScalarFieldEnum)[keyof typeof MunicipioScalarFieldEnum]


  export const EstadoScalarFieldEnum: {
    id_Estado: 'id_Estado',
    Estado: 'Estado',
    uf: 'uf'
  };

  export type EstadoScalarFieldEnum = (typeof EstadoScalarFieldEnum)[keyof typeof EstadoScalarFieldEnum]


  export const ImagesScalarFieldEnum: {
    id: 'id',
    Url: 'Url',
    FotoId: 'FotoId'
  };

  export type ImagesScalarFieldEnum = (typeof ImagesScalarFieldEnum)[keyof typeof ImagesScalarFieldEnum]


  export const VotosScalarFieldEnum: {
    id_voto: 'id_voto',
    Votar: 'Votar',
    candidatoId: 'candidatoId'
  };

  export type VotosScalarFieldEnum = (typeof VotosScalarFieldEnum)[keyof typeof VotosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type PesquisadoresWhereInput = {
    AND?: PesquisadoresWhereInput | PesquisadoresWhereInput[]
    OR?: PesquisadoresWhereInput[]
    NOT?: PesquisadoresWhereInput | PesquisadoresWhereInput[]
    id_Pesquisador?: IntFilter<"Pesquisadores"> | number
    email?: StringFilter<"Pesquisadores"> | string
    name?: StringFilter<"Pesquisadores"> | string
    cpf?: StringFilter<"Pesquisadores"> | string
    senha?: StringFilter<"Pesquisadores"> | string
    createdAt?: DateTimeFilter<"Pesquisadores"> | Date | string
    updatedAt?: DateTimeFilter<"Pesquisadores"> | Date | string
    roleId?: IntFilter<"Pesquisadores"> | number
    Roles?: XOR<RoleRelationFilter, RoleWhereInput>
  }

  export type PesquisadoresOrderByWithRelationInput = {
    id_Pesquisador?: SortOrder
    email?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    senha?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    roleId?: SortOrder
    Roles?: RoleOrderByWithRelationInput
  }

  export type PesquisadoresWhereUniqueInput = Prisma.AtLeast<{
    id_Pesquisador?: number
    email?: string
    cpf?: string
    AND?: PesquisadoresWhereInput | PesquisadoresWhereInput[]
    OR?: PesquisadoresWhereInput[]
    NOT?: PesquisadoresWhereInput | PesquisadoresWhereInput[]
    name?: StringFilter<"Pesquisadores"> | string
    senha?: StringFilter<"Pesquisadores"> | string
    createdAt?: DateTimeFilter<"Pesquisadores"> | Date | string
    updatedAt?: DateTimeFilter<"Pesquisadores"> | Date | string
    roleId?: IntFilter<"Pesquisadores"> | number
    Roles?: XOR<RoleRelationFilter, RoleWhereInput>
  }, "id_Pesquisador" | "email" | "cpf">

  export type PesquisadoresOrderByWithAggregationInput = {
    id_Pesquisador?: SortOrder
    email?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    senha?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    roleId?: SortOrder
    _count?: PesquisadoresCountOrderByAggregateInput
    _avg?: PesquisadoresAvgOrderByAggregateInput
    _max?: PesquisadoresMaxOrderByAggregateInput
    _min?: PesquisadoresMinOrderByAggregateInput
    _sum?: PesquisadoresSumOrderByAggregateInput
  }

  export type PesquisadoresScalarWhereWithAggregatesInput = {
    AND?: PesquisadoresScalarWhereWithAggregatesInput | PesquisadoresScalarWhereWithAggregatesInput[]
    OR?: PesquisadoresScalarWhereWithAggregatesInput[]
    NOT?: PesquisadoresScalarWhereWithAggregatesInput | PesquisadoresScalarWhereWithAggregatesInput[]
    id_Pesquisador?: IntWithAggregatesFilter<"Pesquisadores"> | number
    email?: StringWithAggregatesFilter<"Pesquisadores"> | string
    name?: StringWithAggregatesFilter<"Pesquisadores"> | string
    cpf?: StringWithAggregatesFilter<"Pesquisadores"> | string
    senha?: StringWithAggregatesFilter<"Pesquisadores"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Pesquisadores"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Pesquisadores"> | Date | string
    roleId?: IntWithAggregatesFilter<"Pesquisadores"> | number
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: IntFilter<"Role"> | number
    Role?: StringFilter<"Role"> | string
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    role?: PesquisadoresListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    Role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: PesquisadoresOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    Role?: StringFilter<"Role"> | string
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    role?: PesquisadoresListRelationFilter
  }, "id">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    Role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Role"> | number
    Role?: StringWithAggregatesFilter<"Role"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
  }

  export type CandidatoWhereInput = {
    AND?: CandidatoWhereInput | CandidatoWhereInput[]
    OR?: CandidatoWhereInput[]
    NOT?: CandidatoWhereInput | CandidatoWhereInput[]
    id_candidato?: IntFilter<"Candidato"> | number
    name?: StringFilter<"Candidato"> | string
    apelido?: StringNullableFilter<"Candidato"> | string | null
    estado_id?: IntFilter<"Candidato"> | number
    municipio_id?: IntFilter<"Candidato"> | number
    estado?: XOR<EstadoRelationFilter, EstadoWhereInput>
    Municipio?: XOR<MunicipioRelationFilter, municipioWhereInput>
    images?: ImagesListRelationFilter
    votos?: VotosListRelationFilter
  }

  export type CandidatoOrderByWithRelationInput = {
    id_candidato?: SortOrder
    name?: SortOrder
    apelido?: SortOrderInput | SortOrder
    estado_id?: SortOrder
    municipio_id?: SortOrder
    estado?: EstadoOrderByWithRelationInput
    Municipio?: municipioOrderByWithRelationInput
    images?: ImagesOrderByRelationAggregateInput
    votos?: VotosOrderByRelationAggregateInput
  }

  export type CandidatoWhereUniqueInput = Prisma.AtLeast<{
    id_candidato?: number
    AND?: CandidatoWhereInput | CandidatoWhereInput[]
    OR?: CandidatoWhereInput[]
    NOT?: CandidatoWhereInput | CandidatoWhereInput[]
    name?: StringFilter<"Candidato"> | string
    apelido?: StringNullableFilter<"Candidato"> | string | null
    estado_id?: IntFilter<"Candidato"> | number
    municipio_id?: IntFilter<"Candidato"> | number
    estado?: XOR<EstadoRelationFilter, EstadoWhereInput>
    Municipio?: XOR<MunicipioRelationFilter, municipioWhereInput>
    images?: ImagesListRelationFilter
    votos?: VotosListRelationFilter
  }, "id_candidato">

  export type CandidatoOrderByWithAggregationInput = {
    id_candidato?: SortOrder
    name?: SortOrder
    apelido?: SortOrderInput | SortOrder
    estado_id?: SortOrder
    municipio_id?: SortOrder
    _count?: CandidatoCountOrderByAggregateInput
    _avg?: CandidatoAvgOrderByAggregateInput
    _max?: CandidatoMaxOrderByAggregateInput
    _min?: CandidatoMinOrderByAggregateInput
    _sum?: CandidatoSumOrderByAggregateInput
  }

  export type CandidatoScalarWhereWithAggregatesInput = {
    AND?: CandidatoScalarWhereWithAggregatesInput | CandidatoScalarWhereWithAggregatesInput[]
    OR?: CandidatoScalarWhereWithAggregatesInput[]
    NOT?: CandidatoScalarWhereWithAggregatesInput | CandidatoScalarWhereWithAggregatesInput[]
    id_candidato?: IntWithAggregatesFilter<"Candidato"> | number
    name?: StringWithAggregatesFilter<"Candidato"> | string
    apelido?: StringNullableWithAggregatesFilter<"Candidato"> | string | null
    estado_id?: IntWithAggregatesFilter<"Candidato"> | number
    municipio_id?: IntWithAggregatesFilter<"Candidato"> | number
  }

  export type municipioWhereInput = {
    AND?: municipioWhereInput | municipioWhereInput[]
    OR?: municipioWhereInput[]
    NOT?: municipioWhereInput | municipioWhereInput[]
    idMunicipio?: IntFilter<"municipio"> | number
    Municipio?: StringFilter<"municipio"> | string
    candidato?: CandidatoListRelationFilter
  }

  export type municipioOrderByWithRelationInput = {
    idMunicipio?: SortOrder
    Municipio?: SortOrder
    candidato?: CandidatoOrderByRelationAggregateInput
  }

  export type municipioWhereUniqueInput = Prisma.AtLeast<{
    idMunicipio?: number
    AND?: municipioWhereInput | municipioWhereInput[]
    OR?: municipioWhereInput[]
    NOT?: municipioWhereInput | municipioWhereInput[]
    Municipio?: StringFilter<"municipio"> | string
    candidato?: CandidatoListRelationFilter
  }, "idMunicipio">

  export type municipioOrderByWithAggregationInput = {
    idMunicipio?: SortOrder
    Municipio?: SortOrder
    _count?: municipioCountOrderByAggregateInput
    _avg?: municipioAvgOrderByAggregateInput
    _max?: municipioMaxOrderByAggregateInput
    _min?: municipioMinOrderByAggregateInput
    _sum?: municipioSumOrderByAggregateInput
  }

  export type municipioScalarWhereWithAggregatesInput = {
    AND?: municipioScalarWhereWithAggregatesInput | municipioScalarWhereWithAggregatesInput[]
    OR?: municipioScalarWhereWithAggregatesInput[]
    NOT?: municipioScalarWhereWithAggregatesInput | municipioScalarWhereWithAggregatesInput[]
    idMunicipio?: IntWithAggregatesFilter<"municipio"> | number
    Municipio?: StringWithAggregatesFilter<"municipio"> | string
  }

  export type EstadoWhereInput = {
    AND?: EstadoWhereInput | EstadoWhereInput[]
    OR?: EstadoWhereInput[]
    NOT?: EstadoWhereInput | EstadoWhereInput[]
    id_Estado?: IntFilter<"Estado"> | number
    Estado?: StringFilter<"Estado"> | string
    uf?: StringFilter<"Estado"> | string
    candidato?: CandidatoListRelationFilter
  }

  export type EstadoOrderByWithRelationInput = {
    id_Estado?: SortOrder
    Estado?: SortOrder
    uf?: SortOrder
    candidato?: CandidatoOrderByRelationAggregateInput
  }

  export type EstadoWhereUniqueInput = Prisma.AtLeast<{
    id_Estado?: number
    AND?: EstadoWhereInput | EstadoWhereInput[]
    OR?: EstadoWhereInput[]
    NOT?: EstadoWhereInput | EstadoWhereInput[]
    Estado?: StringFilter<"Estado"> | string
    uf?: StringFilter<"Estado"> | string
    candidato?: CandidatoListRelationFilter
  }, "id_Estado">

  export type EstadoOrderByWithAggregationInput = {
    id_Estado?: SortOrder
    Estado?: SortOrder
    uf?: SortOrder
    _count?: EstadoCountOrderByAggregateInput
    _avg?: EstadoAvgOrderByAggregateInput
    _max?: EstadoMaxOrderByAggregateInput
    _min?: EstadoMinOrderByAggregateInput
    _sum?: EstadoSumOrderByAggregateInput
  }

  export type EstadoScalarWhereWithAggregatesInput = {
    AND?: EstadoScalarWhereWithAggregatesInput | EstadoScalarWhereWithAggregatesInput[]
    OR?: EstadoScalarWhereWithAggregatesInput[]
    NOT?: EstadoScalarWhereWithAggregatesInput | EstadoScalarWhereWithAggregatesInput[]
    id_Estado?: IntWithAggregatesFilter<"Estado"> | number
    Estado?: StringWithAggregatesFilter<"Estado"> | string
    uf?: StringWithAggregatesFilter<"Estado"> | string
  }

  export type ImagesWhereInput = {
    AND?: ImagesWhereInput | ImagesWhereInput[]
    OR?: ImagesWhereInput[]
    NOT?: ImagesWhereInput | ImagesWhereInput[]
    id?: IntFilter<"Images"> | number
    Url?: StringFilter<"Images"> | string
    FotoId?: IntFilter<"Images"> | number
    perfil?: XOR<CandidatoRelationFilter, CandidatoWhereInput>
  }

  export type ImagesOrderByWithRelationInput = {
    id?: SortOrder
    Url?: SortOrder
    FotoId?: SortOrder
    perfil?: CandidatoOrderByWithRelationInput
  }

  export type ImagesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ImagesWhereInput | ImagesWhereInput[]
    OR?: ImagesWhereInput[]
    NOT?: ImagesWhereInput | ImagesWhereInput[]
    Url?: StringFilter<"Images"> | string
    FotoId?: IntFilter<"Images"> | number
    perfil?: XOR<CandidatoRelationFilter, CandidatoWhereInput>
  }, "id">

  export type ImagesOrderByWithAggregationInput = {
    id?: SortOrder
    Url?: SortOrder
    FotoId?: SortOrder
    _count?: ImagesCountOrderByAggregateInput
    _avg?: ImagesAvgOrderByAggregateInput
    _max?: ImagesMaxOrderByAggregateInput
    _min?: ImagesMinOrderByAggregateInput
    _sum?: ImagesSumOrderByAggregateInput
  }

  export type ImagesScalarWhereWithAggregatesInput = {
    AND?: ImagesScalarWhereWithAggregatesInput | ImagesScalarWhereWithAggregatesInput[]
    OR?: ImagesScalarWhereWithAggregatesInput[]
    NOT?: ImagesScalarWhereWithAggregatesInput | ImagesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Images"> | number
    Url?: StringWithAggregatesFilter<"Images"> | string
    FotoId?: IntWithAggregatesFilter<"Images"> | number
  }

  export type VotosWhereInput = {
    AND?: VotosWhereInput | VotosWhereInput[]
    OR?: VotosWhereInput[]
    NOT?: VotosWhereInput | VotosWhereInput[]
    id_voto?: IntFilter<"Votos"> | number
    Votar?: BoolFilter<"Votos"> | boolean
    candidatoId?: IntFilter<"Votos"> | number
    candidato?: XOR<CandidatoRelationFilter, CandidatoWhereInput>
  }

  export type VotosOrderByWithRelationInput = {
    id_voto?: SortOrder
    Votar?: SortOrder
    candidatoId?: SortOrder
    candidato?: CandidatoOrderByWithRelationInput
  }

  export type VotosWhereUniqueInput = Prisma.AtLeast<{
    id_voto?: number
    AND?: VotosWhereInput | VotosWhereInput[]
    OR?: VotosWhereInput[]
    NOT?: VotosWhereInput | VotosWhereInput[]
    Votar?: BoolFilter<"Votos"> | boolean
    candidatoId?: IntFilter<"Votos"> | number
    candidato?: XOR<CandidatoRelationFilter, CandidatoWhereInput>
  }, "id_voto">

  export type VotosOrderByWithAggregationInput = {
    id_voto?: SortOrder
    Votar?: SortOrder
    candidatoId?: SortOrder
    _count?: VotosCountOrderByAggregateInput
    _avg?: VotosAvgOrderByAggregateInput
    _max?: VotosMaxOrderByAggregateInput
    _min?: VotosMinOrderByAggregateInput
    _sum?: VotosSumOrderByAggregateInput
  }

  export type VotosScalarWhereWithAggregatesInput = {
    AND?: VotosScalarWhereWithAggregatesInput | VotosScalarWhereWithAggregatesInput[]
    OR?: VotosScalarWhereWithAggregatesInput[]
    NOT?: VotosScalarWhereWithAggregatesInput | VotosScalarWhereWithAggregatesInput[]
    id_voto?: IntWithAggregatesFilter<"Votos"> | number
    Votar?: BoolWithAggregatesFilter<"Votos"> | boolean
    candidatoId?: IntWithAggregatesFilter<"Votos"> | number
  }

  export type PesquisadoresCreateInput = {
    email: string
    name: string
    cpf: string
    senha: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Roles: RoleCreateNestedOneWithoutRoleInput
  }

  export type PesquisadoresUncheckedCreateInput = {
    id_Pesquisador?: number
    email: string
    name: string
    cpf: string
    senha: string
    createdAt?: Date | string
    updatedAt?: Date | string
    roleId: number
  }

  export type PesquisadoresUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Roles?: RoleUpdateOneRequiredWithoutRoleNestedInput
  }

  export type PesquisadoresUncheckedUpdateInput = {
    id_Pesquisador?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type PesquisadoresCreateManyInput = {
    id_Pesquisador?: number
    email: string
    name: string
    cpf: string
    senha: string
    createdAt?: Date | string
    updatedAt?: Date | string
    roleId: number
  }

  export type PesquisadoresUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PesquisadoresUncheckedUpdateManyInput = {
    id_Pesquisador?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type RoleCreateInput = {
    Role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: PesquisadoresCreateNestedManyWithoutRolesInput
  }

  export type RoleUncheckedCreateInput = {
    id?: number
    Role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: PesquisadoresUncheckedCreateNestedManyWithoutRolesInput
  }

  export type RoleUpdateInput = {
    Role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: PesquisadoresUpdateManyWithoutRolesNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: PesquisadoresUncheckedUpdateManyWithoutRolesNestedInput
  }

  export type RoleCreateManyInput = {
    id?: number
    Role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleUpdateManyMutationInput = {
    Role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidatoCreateInput = {
    name: string
    apelido?: string | null
    estado: EstadoCreateNestedOneWithoutCandidatoInput
    Municipio: municipioCreateNestedOneWithoutCandidatoInput
    images?: ImagesCreateNestedManyWithoutPerfilInput
    votos?: VotosCreateNestedManyWithoutCandidatoInput
  }

  export type CandidatoUncheckedCreateInput = {
    id_candidato?: number
    name: string
    apelido?: string | null
    estado_id: number
    municipio_id: number
    images?: ImagesUncheckedCreateNestedManyWithoutPerfilInput
    votos?: VotosUncheckedCreateNestedManyWithoutCandidatoInput
  }

  export type CandidatoUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    apelido?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EstadoUpdateOneRequiredWithoutCandidatoNestedInput
    Municipio?: municipioUpdateOneRequiredWithoutCandidatoNestedInput
    images?: ImagesUpdateManyWithoutPerfilNestedInput
    votos?: VotosUpdateManyWithoutCandidatoNestedInput
  }

  export type CandidatoUncheckedUpdateInput = {
    id_candidato?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    apelido?: NullableStringFieldUpdateOperationsInput | string | null
    estado_id?: IntFieldUpdateOperationsInput | number
    municipio_id?: IntFieldUpdateOperationsInput | number
    images?: ImagesUncheckedUpdateManyWithoutPerfilNestedInput
    votos?: VotosUncheckedUpdateManyWithoutCandidatoNestedInput
  }

  export type CandidatoCreateManyInput = {
    id_candidato?: number
    name: string
    apelido?: string | null
    estado_id: number
    municipio_id: number
  }

  export type CandidatoUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    apelido?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidatoUncheckedUpdateManyInput = {
    id_candidato?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    apelido?: NullableStringFieldUpdateOperationsInput | string | null
    estado_id?: IntFieldUpdateOperationsInput | number
    municipio_id?: IntFieldUpdateOperationsInput | number
  }

  export type municipioCreateInput = {
    Municipio: string
    candidato?: CandidatoCreateNestedManyWithoutMunicipioInput
  }

  export type municipioUncheckedCreateInput = {
    idMunicipio?: number
    Municipio: string
    candidato?: CandidatoUncheckedCreateNestedManyWithoutMunicipioInput
  }

  export type municipioUpdateInput = {
    Municipio?: StringFieldUpdateOperationsInput | string
    candidato?: CandidatoUpdateManyWithoutMunicipioNestedInput
  }

  export type municipioUncheckedUpdateInput = {
    idMunicipio?: IntFieldUpdateOperationsInput | number
    Municipio?: StringFieldUpdateOperationsInput | string
    candidato?: CandidatoUncheckedUpdateManyWithoutMunicipioNestedInput
  }

  export type municipioCreateManyInput = {
    idMunicipio?: number
    Municipio: string
  }

  export type municipioUpdateManyMutationInput = {
    Municipio?: StringFieldUpdateOperationsInput | string
  }

  export type municipioUncheckedUpdateManyInput = {
    idMunicipio?: IntFieldUpdateOperationsInput | number
    Municipio?: StringFieldUpdateOperationsInput | string
  }

  export type EstadoCreateInput = {
    Estado: string
    uf: string
    candidato?: CandidatoCreateNestedManyWithoutEstadoInput
  }

  export type EstadoUncheckedCreateInput = {
    id_Estado?: number
    Estado: string
    uf: string
    candidato?: CandidatoUncheckedCreateNestedManyWithoutEstadoInput
  }

  export type EstadoUpdateInput = {
    Estado?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    candidato?: CandidatoUpdateManyWithoutEstadoNestedInput
  }

  export type EstadoUncheckedUpdateInput = {
    id_Estado?: IntFieldUpdateOperationsInput | number
    Estado?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
    candidato?: CandidatoUncheckedUpdateManyWithoutEstadoNestedInput
  }

  export type EstadoCreateManyInput = {
    id_Estado?: number
    Estado: string
    uf: string
  }

  export type EstadoUpdateManyMutationInput = {
    Estado?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
  }

  export type EstadoUncheckedUpdateManyInput = {
    id_Estado?: IntFieldUpdateOperationsInput | number
    Estado?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
  }

  export type ImagesCreateInput = {
    Url: string
    perfil: CandidatoCreateNestedOneWithoutImagesInput
  }

  export type ImagesUncheckedCreateInput = {
    id?: number
    Url: string
    FotoId: number
  }

  export type ImagesUpdateInput = {
    Url?: StringFieldUpdateOperationsInput | string
    perfil?: CandidatoUpdateOneRequiredWithoutImagesNestedInput
  }

  export type ImagesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Url?: StringFieldUpdateOperationsInput | string
    FotoId?: IntFieldUpdateOperationsInput | number
  }

  export type ImagesCreateManyInput = {
    id?: number
    Url: string
    FotoId: number
  }

  export type ImagesUpdateManyMutationInput = {
    Url?: StringFieldUpdateOperationsInput | string
  }

  export type ImagesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Url?: StringFieldUpdateOperationsInput | string
    FotoId?: IntFieldUpdateOperationsInput | number
  }

  export type VotosCreateInput = {
    Votar: boolean
    candidato: CandidatoCreateNestedOneWithoutVotosInput
  }

  export type VotosUncheckedCreateInput = {
    id_voto?: number
    Votar: boolean
    candidatoId: number
  }

  export type VotosUpdateInput = {
    Votar?: BoolFieldUpdateOperationsInput | boolean
    candidato?: CandidatoUpdateOneRequiredWithoutVotosNestedInput
  }

  export type VotosUncheckedUpdateInput = {
    id_voto?: IntFieldUpdateOperationsInput | number
    Votar?: BoolFieldUpdateOperationsInput | boolean
    candidatoId?: IntFieldUpdateOperationsInput | number
  }

  export type VotosCreateManyInput = {
    id_voto?: number
    Votar: boolean
    candidatoId: number
  }

  export type VotosUpdateManyMutationInput = {
    Votar?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VotosUncheckedUpdateManyInput = {
    id_voto?: IntFieldUpdateOperationsInput | number
    Votar?: BoolFieldUpdateOperationsInput | boolean
    candidatoId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type RoleRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type PesquisadoresCountOrderByAggregateInput = {
    id_Pesquisador?: SortOrder
    email?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    senha?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    roleId?: SortOrder
  }

  export type PesquisadoresAvgOrderByAggregateInput = {
    id_Pesquisador?: SortOrder
    roleId?: SortOrder
  }

  export type PesquisadoresMaxOrderByAggregateInput = {
    id_Pesquisador?: SortOrder
    email?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    senha?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    roleId?: SortOrder
  }

  export type PesquisadoresMinOrderByAggregateInput = {
    id_Pesquisador?: SortOrder
    email?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    senha?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    roleId?: SortOrder
  }

  export type PesquisadoresSumOrderByAggregateInput = {
    id_Pesquisador?: SortOrder
    roleId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type PesquisadoresListRelationFilter = {
    every?: PesquisadoresWhereInput
    some?: PesquisadoresWhereInput
    none?: PesquisadoresWhereInput
  }

  export type PesquisadoresOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    Role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    Role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    Role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EstadoRelationFilter = {
    is?: EstadoWhereInput
    isNot?: EstadoWhereInput
  }

  export type MunicipioRelationFilter = {
    is?: municipioWhereInput
    isNot?: municipioWhereInput
  }

  export type ImagesListRelationFilter = {
    every?: ImagesWhereInput
    some?: ImagesWhereInput
    none?: ImagesWhereInput
  }

  export type VotosListRelationFilter = {
    every?: VotosWhereInput
    some?: VotosWhereInput
    none?: VotosWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ImagesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VotosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CandidatoCountOrderByAggregateInput = {
    id_candidato?: SortOrder
    name?: SortOrder
    apelido?: SortOrder
    estado_id?: SortOrder
    municipio_id?: SortOrder
  }

  export type CandidatoAvgOrderByAggregateInput = {
    id_candidato?: SortOrder
    estado_id?: SortOrder
    municipio_id?: SortOrder
  }

  export type CandidatoMaxOrderByAggregateInput = {
    id_candidato?: SortOrder
    name?: SortOrder
    apelido?: SortOrder
    estado_id?: SortOrder
    municipio_id?: SortOrder
  }

  export type CandidatoMinOrderByAggregateInput = {
    id_candidato?: SortOrder
    name?: SortOrder
    apelido?: SortOrder
    estado_id?: SortOrder
    municipio_id?: SortOrder
  }

  export type CandidatoSumOrderByAggregateInput = {
    id_candidato?: SortOrder
    estado_id?: SortOrder
    municipio_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type CandidatoListRelationFilter = {
    every?: CandidatoWhereInput
    some?: CandidatoWhereInput
    none?: CandidatoWhereInput
  }

  export type CandidatoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type municipioCountOrderByAggregateInput = {
    idMunicipio?: SortOrder
    Municipio?: SortOrder
  }

  export type municipioAvgOrderByAggregateInput = {
    idMunicipio?: SortOrder
  }

  export type municipioMaxOrderByAggregateInput = {
    idMunicipio?: SortOrder
    Municipio?: SortOrder
  }

  export type municipioMinOrderByAggregateInput = {
    idMunicipio?: SortOrder
    Municipio?: SortOrder
  }

  export type municipioSumOrderByAggregateInput = {
    idMunicipio?: SortOrder
  }

  export type EstadoCountOrderByAggregateInput = {
    id_Estado?: SortOrder
    Estado?: SortOrder
    uf?: SortOrder
  }

  export type EstadoAvgOrderByAggregateInput = {
    id_Estado?: SortOrder
  }

  export type EstadoMaxOrderByAggregateInput = {
    id_Estado?: SortOrder
    Estado?: SortOrder
    uf?: SortOrder
  }

  export type EstadoMinOrderByAggregateInput = {
    id_Estado?: SortOrder
    Estado?: SortOrder
    uf?: SortOrder
  }

  export type EstadoSumOrderByAggregateInput = {
    id_Estado?: SortOrder
  }

  export type CandidatoRelationFilter = {
    is?: CandidatoWhereInput
    isNot?: CandidatoWhereInput
  }

  export type ImagesCountOrderByAggregateInput = {
    id?: SortOrder
    Url?: SortOrder
    FotoId?: SortOrder
  }

  export type ImagesAvgOrderByAggregateInput = {
    id?: SortOrder
    FotoId?: SortOrder
  }

  export type ImagesMaxOrderByAggregateInput = {
    id?: SortOrder
    Url?: SortOrder
    FotoId?: SortOrder
  }

  export type ImagesMinOrderByAggregateInput = {
    id?: SortOrder
    Url?: SortOrder
    FotoId?: SortOrder
  }

  export type ImagesSumOrderByAggregateInput = {
    id?: SortOrder
    FotoId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type VotosCountOrderByAggregateInput = {
    id_voto?: SortOrder
    Votar?: SortOrder
    candidatoId?: SortOrder
  }

  export type VotosAvgOrderByAggregateInput = {
    id_voto?: SortOrder
    candidatoId?: SortOrder
  }

  export type VotosMaxOrderByAggregateInput = {
    id_voto?: SortOrder
    Votar?: SortOrder
    candidatoId?: SortOrder
  }

  export type VotosMinOrderByAggregateInput = {
    id_voto?: SortOrder
    Votar?: SortOrder
    candidatoId?: SortOrder
  }

  export type VotosSumOrderByAggregateInput = {
    id_voto?: SortOrder
    candidatoId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type RoleCreateNestedOneWithoutRoleInput = {
    create?: XOR<RoleCreateWithoutRoleInput, RoleUncheckedCreateWithoutRoleInput>
    connectOrCreate?: RoleCreateOrConnectWithoutRoleInput
    connect?: RoleWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type RoleUpdateOneRequiredWithoutRoleNestedInput = {
    create?: XOR<RoleCreateWithoutRoleInput, RoleUncheckedCreateWithoutRoleInput>
    connectOrCreate?: RoleCreateOrConnectWithoutRoleInput
    upsert?: RoleUpsertWithoutRoleInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutRoleInput, RoleUpdateWithoutRoleInput>, RoleUncheckedUpdateWithoutRoleInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PesquisadoresCreateNestedManyWithoutRolesInput = {
    create?: XOR<PesquisadoresCreateWithoutRolesInput, PesquisadoresUncheckedCreateWithoutRolesInput> | PesquisadoresCreateWithoutRolesInput[] | PesquisadoresUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: PesquisadoresCreateOrConnectWithoutRolesInput | PesquisadoresCreateOrConnectWithoutRolesInput[]
    createMany?: PesquisadoresCreateManyRolesInputEnvelope
    connect?: PesquisadoresWhereUniqueInput | PesquisadoresWhereUniqueInput[]
  }

  export type PesquisadoresUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<PesquisadoresCreateWithoutRolesInput, PesquisadoresUncheckedCreateWithoutRolesInput> | PesquisadoresCreateWithoutRolesInput[] | PesquisadoresUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: PesquisadoresCreateOrConnectWithoutRolesInput | PesquisadoresCreateOrConnectWithoutRolesInput[]
    createMany?: PesquisadoresCreateManyRolesInputEnvelope
    connect?: PesquisadoresWhereUniqueInput | PesquisadoresWhereUniqueInput[]
  }

  export type PesquisadoresUpdateManyWithoutRolesNestedInput = {
    create?: XOR<PesquisadoresCreateWithoutRolesInput, PesquisadoresUncheckedCreateWithoutRolesInput> | PesquisadoresCreateWithoutRolesInput[] | PesquisadoresUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: PesquisadoresCreateOrConnectWithoutRolesInput | PesquisadoresCreateOrConnectWithoutRolesInput[]
    upsert?: PesquisadoresUpsertWithWhereUniqueWithoutRolesInput | PesquisadoresUpsertWithWhereUniqueWithoutRolesInput[]
    createMany?: PesquisadoresCreateManyRolesInputEnvelope
    set?: PesquisadoresWhereUniqueInput | PesquisadoresWhereUniqueInput[]
    disconnect?: PesquisadoresWhereUniqueInput | PesquisadoresWhereUniqueInput[]
    delete?: PesquisadoresWhereUniqueInput | PesquisadoresWhereUniqueInput[]
    connect?: PesquisadoresWhereUniqueInput | PesquisadoresWhereUniqueInput[]
    update?: PesquisadoresUpdateWithWhereUniqueWithoutRolesInput | PesquisadoresUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: PesquisadoresUpdateManyWithWhereWithoutRolesInput | PesquisadoresUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: PesquisadoresScalarWhereInput | PesquisadoresScalarWhereInput[]
  }

  export type PesquisadoresUncheckedUpdateManyWithoutRolesNestedInput = {
    create?: XOR<PesquisadoresCreateWithoutRolesInput, PesquisadoresUncheckedCreateWithoutRolesInput> | PesquisadoresCreateWithoutRolesInput[] | PesquisadoresUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: PesquisadoresCreateOrConnectWithoutRolesInput | PesquisadoresCreateOrConnectWithoutRolesInput[]
    upsert?: PesquisadoresUpsertWithWhereUniqueWithoutRolesInput | PesquisadoresUpsertWithWhereUniqueWithoutRolesInput[]
    createMany?: PesquisadoresCreateManyRolesInputEnvelope
    set?: PesquisadoresWhereUniqueInput | PesquisadoresWhereUniqueInput[]
    disconnect?: PesquisadoresWhereUniqueInput | PesquisadoresWhereUniqueInput[]
    delete?: PesquisadoresWhereUniqueInput | PesquisadoresWhereUniqueInput[]
    connect?: PesquisadoresWhereUniqueInput | PesquisadoresWhereUniqueInput[]
    update?: PesquisadoresUpdateWithWhereUniqueWithoutRolesInput | PesquisadoresUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: PesquisadoresUpdateManyWithWhereWithoutRolesInput | PesquisadoresUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: PesquisadoresScalarWhereInput | PesquisadoresScalarWhereInput[]
  }

  export type EstadoCreateNestedOneWithoutCandidatoInput = {
    create?: XOR<EstadoCreateWithoutCandidatoInput, EstadoUncheckedCreateWithoutCandidatoInput>
    connectOrCreate?: EstadoCreateOrConnectWithoutCandidatoInput
    connect?: EstadoWhereUniqueInput
  }

  export type municipioCreateNestedOneWithoutCandidatoInput = {
    create?: XOR<municipioCreateWithoutCandidatoInput, municipioUncheckedCreateWithoutCandidatoInput>
    connectOrCreate?: municipioCreateOrConnectWithoutCandidatoInput
    connect?: municipioWhereUniqueInput
  }

  export type ImagesCreateNestedManyWithoutPerfilInput = {
    create?: XOR<ImagesCreateWithoutPerfilInput, ImagesUncheckedCreateWithoutPerfilInput> | ImagesCreateWithoutPerfilInput[] | ImagesUncheckedCreateWithoutPerfilInput[]
    connectOrCreate?: ImagesCreateOrConnectWithoutPerfilInput | ImagesCreateOrConnectWithoutPerfilInput[]
    createMany?: ImagesCreateManyPerfilInputEnvelope
    connect?: ImagesWhereUniqueInput | ImagesWhereUniqueInput[]
  }

  export type VotosCreateNestedManyWithoutCandidatoInput = {
    create?: XOR<VotosCreateWithoutCandidatoInput, VotosUncheckedCreateWithoutCandidatoInput> | VotosCreateWithoutCandidatoInput[] | VotosUncheckedCreateWithoutCandidatoInput[]
    connectOrCreate?: VotosCreateOrConnectWithoutCandidatoInput | VotosCreateOrConnectWithoutCandidatoInput[]
    createMany?: VotosCreateManyCandidatoInputEnvelope
    connect?: VotosWhereUniqueInput | VotosWhereUniqueInput[]
  }

  export type ImagesUncheckedCreateNestedManyWithoutPerfilInput = {
    create?: XOR<ImagesCreateWithoutPerfilInput, ImagesUncheckedCreateWithoutPerfilInput> | ImagesCreateWithoutPerfilInput[] | ImagesUncheckedCreateWithoutPerfilInput[]
    connectOrCreate?: ImagesCreateOrConnectWithoutPerfilInput | ImagesCreateOrConnectWithoutPerfilInput[]
    createMany?: ImagesCreateManyPerfilInputEnvelope
    connect?: ImagesWhereUniqueInput | ImagesWhereUniqueInput[]
  }

  export type VotosUncheckedCreateNestedManyWithoutCandidatoInput = {
    create?: XOR<VotosCreateWithoutCandidatoInput, VotosUncheckedCreateWithoutCandidatoInput> | VotosCreateWithoutCandidatoInput[] | VotosUncheckedCreateWithoutCandidatoInput[]
    connectOrCreate?: VotosCreateOrConnectWithoutCandidatoInput | VotosCreateOrConnectWithoutCandidatoInput[]
    createMany?: VotosCreateManyCandidatoInputEnvelope
    connect?: VotosWhereUniqueInput | VotosWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EstadoUpdateOneRequiredWithoutCandidatoNestedInput = {
    create?: XOR<EstadoCreateWithoutCandidatoInput, EstadoUncheckedCreateWithoutCandidatoInput>
    connectOrCreate?: EstadoCreateOrConnectWithoutCandidatoInput
    upsert?: EstadoUpsertWithoutCandidatoInput
    connect?: EstadoWhereUniqueInput
    update?: XOR<XOR<EstadoUpdateToOneWithWhereWithoutCandidatoInput, EstadoUpdateWithoutCandidatoInput>, EstadoUncheckedUpdateWithoutCandidatoInput>
  }

  export type municipioUpdateOneRequiredWithoutCandidatoNestedInput = {
    create?: XOR<municipioCreateWithoutCandidatoInput, municipioUncheckedCreateWithoutCandidatoInput>
    connectOrCreate?: municipioCreateOrConnectWithoutCandidatoInput
    upsert?: municipioUpsertWithoutCandidatoInput
    connect?: municipioWhereUniqueInput
    update?: XOR<XOR<municipioUpdateToOneWithWhereWithoutCandidatoInput, municipioUpdateWithoutCandidatoInput>, municipioUncheckedUpdateWithoutCandidatoInput>
  }

  export type ImagesUpdateManyWithoutPerfilNestedInput = {
    create?: XOR<ImagesCreateWithoutPerfilInput, ImagesUncheckedCreateWithoutPerfilInput> | ImagesCreateWithoutPerfilInput[] | ImagesUncheckedCreateWithoutPerfilInput[]
    connectOrCreate?: ImagesCreateOrConnectWithoutPerfilInput | ImagesCreateOrConnectWithoutPerfilInput[]
    upsert?: ImagesUpsertWithWhereUniqueWithoutPerfilInput | ImagesUpsertWithWhereUniqueWithoutPerfilInput[]
    createMany?: ImagesCreateManyPerfilInputEnvelope
    set?: ImagesWhereUniqueInput | ImagesWhereUniqueInput[]
    disconnect?: ImagesWhereUniqueInput | ImagesWhereUniqueInput[]
    delete?: ImagesWhereUniqueInput | ImagesWhereUniqueInput[]
    connect?: ImagesWhereUniqueInput | ImagesWhereUniqueInput[]
    update?: ImagesUpdateWithWhereUniqueWithoutPerfilInput | ImagesUpdateWithWhereUniqueWithoutPerfilInput[]
    updateMany?: ImagesUpdateManyWithWhereWithoutPerfilInput | ImagesUpdateManyWithWhereWithoutPerfilInput[]
    deleteMany?: ImagesScalarWhereInput | ImagesScalarWhereInput[]
  }

  export type VotosUpdateManyWithoutCandidatoNestedInput = {
    create?: XOR<VotosCreateWithoutCandidatoInput, VotosUncheckedCreateWithoutCandidatoInput> | VotosCreateWithoutCandidatoInput[] | VotosUncheckedCreateWithoutCandidatoInput[]
    connectOrCreate?: VotosCreateOrConnectWithoutCandidatoInput | VotosCreateOrConnectWithoutCandidatoInput[]
    upsert?: VotosUpsertWithWhereUniqueWithoutCandidatoInput | VotosUpsertWithWhereUniqueWithoutCandidatoInput[]
    createMany?: VotosCreateManyCandidatoInputEnvelope
    set?: VotosWhereUniqueInput | VotosWhereUniqueInput[]
    disconnect?: VotosWhereUniqueInput | VotosWhereUniqueInput[]
    delete?: VotosWhereUniqueInput | VotosWhereUniqueInput[]
    connect?: VotosWhereUniqueInput | VotosWhereUniqueInput[]
    update?: VotosUpdateWithWhereUniqueWithoutCandidatoInput | VotosUpdateWithWhereUniqueWithoutCandidatoInput[]
    updateMany?: VotosUpdateManyWithWhereWithoutCandidatoInput | VotosUpdateManyWithWhereWithoutCandidatoInput[]
    deleteMany?: VotosScalarWhereInput | VotosScalarWhereInput[]
  }

  export type ImagesUncheckedUpdateManyWithoutPerfilNestedInput = {
    create?: XOR<ImagesCreateWithoutPerfilInput, ImagesUncheckedCreateWithoutPerfilInput> | ImagesCreateWithoutPerfilInput[] | ImagesUncheckedCreateWithoutPerfilInput[]
    connectOrCreate?: ImagesCreateOrConnectWithoutPerfilInput | ImagesCreateOrConnectWithoutPerfilInput[]
    upsert?: ImagesUpsertWithWhereUniqueWithoutPerfilInput | ImagesUpsertWithWhereUniqueWithoutPerfilInput[]
    createMany?: ImagesCreateManyPerfilInputEnvelope
    set?: ImagesWhereUniqueInput | ImagesWhereUniqueInput[]
    disconnect?: ImagesWhereUniqueInput | ImagesWhereUniqueInput[]
    delete?: ImagesWhereUniqueInput | ImagesWhereUniqueInput[]
    connect?: ImagesWhereUniqueInput | ImagesWhereUniqueInput[]
    update?: ImagesUpdateWithWhereUniqueWithoutPerfilInput | ImagesUpdateWithWhereUniqueWithoutPerfilInput[]
    updateMany?: ImagesUpdateManyWithWhereWithoutPerfilInput | ImagesUpdateManyWithWhereWithoutPerfilInput[]
    deleteMany?: ImagesScalarWhereInput | ImagesScalarWhereInput[]
  }

  export type VotosUncheckedUpdateManyWithoutCandidatoNestedInput = {
    create?: XOR<VotosCreateWithoutCandidatoInput, VotosUncheckedCreateWithoutCandidatoInput> | VotosCreateWithoutCandidatoInput[] | VotosUncheckedCreateWithoutCandidatoInput[]
    connectOrCreate?: VotosCreateOrConnectWithoutCandidatoInput | VotosCreateOrConnectWithoutCandidatoInput[]
    upsert?: VotosUpsertWithWhereUniqueWithoutCandidatoInput | VotosUpsertWithWhereUniqueWithoutCandidatoInput[]
    createMany?: VotosCreateManyCandidatoInputEnvelope
    set?: VotosWhereUniqueInput | VotosWhereUniqueInput[]
    disconnect?: VotosWhereUniqueInput | VotosWhereUniqueInput[]
    delete?: VotosWhereUniqueInput | VotosWhereUniqueInput[]
    connect?: VotosWhereUniqueInput | VotosWhereUniqueInput[]
    update?: VotosUpdateWithWhereUniqueWithoutCandidatoInput | VotosUpdateWithWhereUniqueWithoutCandidatoInput[]
    updateMany?: VotosUpdateManyWithWhereWithoutCandidatoInput | VotosUpdateManyWithWhereWithoutCandidatoInput[]
    deleteMany?: VotosScalarWhereInput | VotosScalarWhereInput[]
  }

  export type CandidatoCreateNestedManyWithoutMunicipioInput = {
    create?: XOR<CandidatoCreateWithoutMunicipioInput, CandidatoUncheckedCreateWithoutMunicipioInput> | CandidatoCreateWithoutMunicipioInput[] | CandidatoUncheckedCreateWithoutMunicipioInput[]
    connectOrCreate?: CandidatoCreateOrConnectWithoutMunicipioInput | CandidatoCreateOrConnectWithoutMunicipioInput[]
    createMany?: CandidatoCreateManyMunicipioInputEnvelope
    connect?: CandidatoWhereUniqueInput | CandidatoWhereUniqueInput[]
  }

  export type CandidatoUncheckedCreateNestedManyWithoutMunicipioInput = {
    create?: XOR<CandidatoCreateWithoutMunicipioInput, CandidatoUncheckedCreateWithoutMunicipioInput> | CandidatoCreateWithoutMunicipioInput[] | CandidatoUncheckedCreateWithoutMunicipioInput[]
    connectOrCreate?: CandidatoCreateOrConnectWithoutMunicipioInput | CandidatoCreateOrConnectWithoutMunicipioInput[]
    createMany?: CandidatoCreateManyMunicipioInputEnvelope
    connect?: CandidatoWhereUniqueInput | CandidatoWhereUniqueInput[]
  }

  export type CandidatoUpdateManyWithoutMunicipioNestedInput = {
    create?: XOR<CandidatoCreateWithoutMunicipioInput, CandidatoUncheckedCreateWithoutMunicipioInput> | CandidatoCreateWithoutMunicipioInput[] | CandidatoUncheckedCreateWithoutMunicipioInput[]
    connectOrCreate?: CandidatoCreateOrConnectWithoutMunicipioInput | CandidatoCreateOrConnectWithoutMunicipioInput[]
    upsert?: CandidatoUpsertWithWhereUniqueWithoutMunicipioInput | CandidatoUpsertWithWhereUniqueWithoutMunicipioInput[]
    createMany?: CandidatoCreateManyMunicipioInputEnvelope
    set?: CandidatoWhereUniqueInput | CandidatoWhereUniqueInput[]
    disconnect?: CandidatoWhereUniqueInput | CandidatoWhereUniqueInput[]
    delete?: CandidatoWhereUniqueInput | CandidatoWhereUniqueInput[]
    connect?: CandidatoWhereUniqueInput | CandidatoWhereUniqueInput[]
    update?: CandidatoUpdateWithWhereUniqueWithoutMunicipioInput | CandidatoUpdateWithWhereUniqueWithoutMunicipioInput[]
    updateMany?: CandidatoUpdateManyWithWhereWithoutMunicipioInput | CandidatoUpdateManyWithWhereWithoutMunicipioInput[]
    deleteMany?: CandidatoScalarWhereInput | CandidatoScalarWhereInput[]
  }

  export type CandidatoUncheckedUpdateManyWithoutMunicipioNestedInput = {
    create?: XOR<CandidatoCreateWithoutMunicipioInput, CandidatoUncheckedCreateWithoutMunicipioInput> | CandidatoCreateWithoutMunicipioInput[] | CandidatoUncheckedCreateWithoutMunicipioInput[]
    connectOrCreate?: CandidatoCreateOrConnectWithoutMunicipioInput | CandidatoCreateOrConnectWithoutMunicipioInput[]
    upsert?: CandidatoUpsertWithWhereUniqueWithoutMunicipioInput | CandidatoUpsertWithWhereUniqueWithoutMunicipioInput[]
    createMany?: CandidatoCreateManyMunicipioInputEnvelope
    set?: CandidatoWhereUniqueInput | CandidatoWhereUniqueInput[]
    disconnect?: CandidatoWhereUniqueInput | CandidatoWhereUniqueInput[]
    delete?: CandidatoWhereUniqueInput | CandidatoWhereUniqueInput[]
    connect?: CandidatoWhereUniqueInput | CandidatoWhereUniqueInput[]
    update?: CandidatoUpdateWithWhereUniqueWithoutMunicipioInput | CandidatoUpdateWithWhereUniqueWithoutMunicipioInput[]
    updateMany?: CandidatoUpdateManyWithWhereWithoutMunicipioInput | CandidatoUpdateManyWithWhereWithoutMunicipioInput[]
    deleteMany?: CandidatoScalarWhereInput | CandidatoScalarWhereInput[]
  }

  export type CandidatoCreateNestedManyWithoutEstadoInput = {
    create?: XOR<CandidatoCreateWithoutEstadoInput, CandidatoUncheckedCreateWithoutEstadoInput> | CandidatoCreateWithoutEstadoInput[] | CandidatoUncheckedCreateWithoutEstadoInput[]
    connectOrCreate?: CandidatoCreateOrConnectWithoutEstadoInput | CandidatoCreateOrConnectWithoutEstadoInput[]
    createMany?: CandidatoCreateManyEstadoInputEnvelope
    connect?: CandidatoWhereUniqueInput | CandidatoWhereUniqueInput[]
  }

  export type CandidatoUncheckedCreateNestedManyWithoutEstadoInput = {
    create?: XOR<CandidatoCreateWithoutEstadoInput, CandidatoUncheckedCreateWithoutEstadoInput> | CandidatoCreateWithoutEstadoInput[] | CandidatoUncheckedCreateWithoutEstadoInput[]
    connectOrCreate?: CandidatoCreateOrConnectWithoutEstadoInput | CandidatoCreateOrConnectWithoutEstadoInput[]
    createMany?: CandidatoCreateManyEstadoInputEnvelope
    connect?: CandidatoWhereUniqueInput | CandidatoWhereUniqueInput[]
  }

  export type CandidatoUpdateManyWithoutEstadoNestedInput = {
    create?: XOR<CandidatoCreateWithoutEstadoInput, CandidatoUncheckedCreateWithoutEstadoInput> | CandidatoCreateWithoutEstadoInput[] | CandidatoUncheckedCreateWithoutEstadoInput[]
    connectOrCreate?: CandidatoCreateOrConnectWithoutEstadoInput | CandidatoCreateOrConnectWithoutEstadoInput[]
    upsert?: CandidatoUpsertWithWhereUniqueWithoutEstadoInput | CandidatoUpsertWithWhereUniqueWithoutEstadoInput[]
    createMany?: CandidatoCreateManyEstadoInputEnvelope
    set?: CandidatoWhereUniqueInput | CandidatoWhereUniqueInput[]
    disconnect?: CandidatoWhereUniqueInput | CandidatoWhereUniqueInput[]
    delete?: CandidatoWhereUniqueInput | CandidatoWhereUniqueInput[]
    connect?: CandidatoWhereUniqueInput | CandidatoWhereUniqueInput[]
    update?: CandidatoUpdateWithWhereUniqueWithoutEstadoInput | CandidatoUpdateWithWhereUniqueWithoutEstadoInput[]
    updateMany?: CandidatoUpdateManyWithWhereWithoutEstadoInput | CandidatoUpdateManyWithWhereWithoutEstadoInput[]
    deleteMany?: CandidatoScalarWhereInput | CandidatoScalarWhereInput[]
  }

  export type CandidatoUncheckedUpdateManyWithoutEstadoNestedInput = {
    create?: XOR<CandidatoCreateWithoutEstadoInput, CandidatoUncheckedCreateWithoutEstadoInput> | CandidatoCreateWithoutEstadoInput[] | CandidatoUncheckedCreateWithoutEstadoInput[]
    connectOrCreate?: CandidatoCreateOrConnectWithoutEstadoInput | CandidatoCreateOrConnectWithoutEstadoInput[]
    upsert?: CandidatoUpsertWithWhereUniqueWithoutEstadoInput | CandidatoUpsertWithWhereUniqueWithoutEstadoInput[]
    createMany?: CandidatoCreateManyEstadoInputEnvelope
    set?: CandidatoWhereUniqueInput | CandidatoWhereUniqueInput[]
    disconnect?: CandidatoWhereUniqueInput | CandidatoWhereUniqueInput[]
    delete?: CandidatoWhereUniqueInput | CandidatoWhereUniqueInput[]
    connect?: CandidatoWhereUniqueInput | CandidatoWhereUniqueInput[]
    update?: CandidatoUpdateWithWhereUniqueWithoutEstadoInput | CandidatoUpdateWithWhereUniqueWithoutEstadoInput[]
    updateMany?: CandidatoUpdateManyWithWhereWithoutEstadoInput | CandidatoUpdateManyWithWhereWithoutEstadoInput[]
    deleteMany?: CandidatoScalarWhereInput | CandidatoScalarWhereInput[]
  }

  export type CandidatoCreateNestedOneWithoutImagesInput = {
    create?: XOR<CandidatoCreateWithoutImagesInput, CandidatoUncheckedCreateWithoutImagesInput>
    connectOrCreate?: CandidatoCreateOrConnectWithoutImagesInput
    connect?: CandidatoWhereUniqueInput
  }

  export type CandidatoUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<CandidatoCreateWithoutImagesInput, CandidatoUncheckedCreateWithoutImagesInput>
    connectOrCreate?: CandidatoCreateOrConnectWithoutImagesInput
    upsert?: CandidatoUpsertWithoutImagesInput
    connect?: CandidatoWhereUniqueInput
    update?: XOR<XOR<CandidatoUpdateToOneWithWhereWithoutImagesInput, CandidatoUpdateWithoutImagesInput>, CandidatoUncheckedUpdateWithoutImagesInput>
  }

  export type CandidatoCreateNestedOneWithoutVotosInput = {
    create?: XOR<CandidatoCreateWithoutVotosInput, CandidatoUncheckedCreateWithoutVotosInput>
    connectOrCreate?: CandidatoCreateOrConnectWithoutVotosInput
    connect?: CandidatoWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CandidatoUpdateOneRequiredWithoutVotosNestedInput = {
    create?: XOR<CandidatoCreateWithoutVotosInput, CandidatoUncheckedCreateWithoutVotosInput>
    connectOrCreate?: CandidatoCreateOrConnectWithoutVotosInput
    upsert?: CandidatoUpsertWithoutVotosInput
    connect?: CandidatoWhereUniqueInput
    update?: XOR<XOR<CandidatoUpdateToOneWithWhereWithoutVotosInput, CandidatoUpdateWithoutVotosInput>, CandidatoUncheckedUpdateWithoutVotosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type RoleCreateWithoutRoleInput = {
    Role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleUncheckedCreateWithoutRoleInput = {
    id?: number
    Role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleCreateOrConnectWithoutRoleInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutRoleInput, RoleUncheckedCreateWithoutRoleInput>
  }

  export type RoleUpsertWithoutRoleInput = {
    update: XOR<RoleUpdateWithoutRoleInput, RoleUncheckedUpdateWithoutRoleInput>
    create: XOR<RoleCreateWithoutRoleInput, RoleUncheckedCreateWithoutRoleInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutRoleInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutRoleInput, RoleUncheckedUpdateWithoutRoleInput>
  }

  export type RoleUpdateWithoutRoleInput = {
    Role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    Role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PesquisadoresCreateWithoutRolesInput = {
    email: string
    name: string
    cpf: string
    senha: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PesquisadoresUncheckedCreateWithoutRolesInput = {
    id_Pesquisador?: number
    email: string
    name: string
    cpf: string
    senha: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PesquisadoresCreateOrConnectWithoutRolesInput = {
    where: PesquisadoresWhereUniqueInput
    create: XOR<PesquisadoresCreateWithoutRolesInput, PesquisadoresUncheckedCreateWithoutRolesInput>
  }

  export type PesquisadoresCreateManyRolesInputEnvelope = {
    data: PesquisadoresCreateManyRolesInput | PesquisadoresCreateManyRolesInput[]
    skipDuplicates?: boolean
  }

  export type PesquisadoresUpsertWithWhereUniqueWithoutRolesInput = {
    where: PesquisadoresWhereUniqueInput
    update: XOR<PesquisadoresUpdateWithoutRolesInput, PesquisadoresUncheckedUpdateWithoutRolesInput>
    create: XOR<PesquisadoresCreateWithoutRolesInput, PesquisadoresUncheckedCreateWithoutRolesInput>
  }

  export type PesquisadoresUpdateWithWhereUniqueWithoutRolesInput = {
    where: PesquisadoresWhereUniqueInput
    data: XOR<PesquisadoresUpdateWithoutRolesInput, PesquisadoresUncheckedUpdateWithoutRolesInput>
  }

  export type PesquisadoresUpdateManyWithWhereWithoutRolesInput = {
    where: PesquisadoresScalarWhereInput
    data: XOR<PesquisadoresUpdateManyMutationInput, PesquisadoresUncheckedUpdateManyWithoutRolesInput>
  }

  export type PesquisadoresScalarWhereInput = {
    AND?: PesquisadoresScalarWhereInput | PesquisadoresScalarWhereInput[]
    OR?: PesquisadoresScalarWhereInput[]
    NOT?: PesquisadoresScalarWhereInput | PesquisadoresScalarWhereInput[]
    id_Pesquisador?: IntFilter<"Pesquisadores"> | number
    email?: StringFilter<"Pesquisadores"> | string
    name?: StringFilter<"Pesquisadores"> | string
    cpf?: StringFilter<"Pesquisadores"> | string
    senha?: StringFilter<"Pesquisadores"> | string
    createdAt?: DateTimeFilter<"Pesquisadores"> | Date | string
    updatedAt?: DateTimeFilter<"Pesquisadores"> | Date | string
    roleId?: IntFilter<"Pesquisadores"> | number
  }

  export type EstadoCreateWithoutCandidatoInput = {
    Estado: string
    uf: string
  }

  export type EstadoUncheckedCreateWithoutCandidatoInput = {
    id_Estado?: number
    Estado: string
    uf: string
  }

  export type EstadoCreateOrConnectWithoutCandidatoInput = {
    where: EstadoWhereUniqueInput
    create: XOR<EstadoCreateWithoutCandidatoInput, EstadoUncheckedCreateWithoutCandidatoInput>
  }

  export type municipioCreateWithoutCandidatoInput = {
    Municipio: string
  }

  export type municipioUncheckedCreateWithoutCandidatoInput = {
    idMunicipio?: number
    Municipio: string
  }

  export type municipioCreateOrConnectWithoutCandidatoInput = {
    where: municipioWhereUniqueInput
    create: XOR<municipioCreateWithoutCandidatoInput, municipioUncheckedCreateWithoutCandidatoInput>
  }

  export type ImagesCreateWithoutPerfilInput = {
    Url: string
  }

  export type ImagesUncheckedCreateWithoutPerfilInput = {
    id?: number
    Url: string
  }

  export type ImagesCreateOrConnectWithoutPerfilInput = {
    where: ImagesWhereUniqueInput
    create: XOR<ImagesCreateWithoutPerfilInput, ImagesUncheckedCreateWithoutPerfilInput>
  }

  export type ImagesCreateManyPerfilInputEnvelope = {
    data: ImagesCreateManyPerfilInput | ImagesCreateManyPerfilInput[]
    skipDuplicates?: boolean
  }

  export type VotosCreateWithoutCandidatoInput = {
    Votar: boolean
  }

  export type VotosUncheckedCreateWithoutCandidatoInput = {
    id_voto?: number
    Votar: boolean
  }

  export type VotosCreateOrConnectWithoutCandidatoInput = {
    where: VotosWhereUniqueInput
    create: XOR<VotosCreateWithoutCandidatoInput, VotosUncheckedCreateWithoutCandidatoInput>
  }

  export type VotosCreateManyCandidatoInputEnvelope = {
    data: VotosCreateManyCandidatoInput | VotosCreateManyCandidatoInput[]
    skipDuplicates?: boolean
  }

  export type EstadoUpsertWithoutCandidatoInput = {
    update: XOR<EstadoUpdateWithoutCandidatoInput, EstadoUncheckedUpdateWithoutCandidatoInput>
    create: XOR<EstadoCreateWithoutCandidatoInput, EstadoUncheckedCreateWithoutCandidatoInput>
    where?: EstadoWhereInput
  }

  export type EstadoUpdateToOneWithWhereWithoutCandidatoInput = {
    where?: EstadoWhereInput
    data: XOR<EstadoUpdateWithoutCandidatoInput, EstadoUncheckedUpdateWithoutCandidatoInput>
  }

  export type EstadoUpdateWithoutCandidatoInput = {
    Estado?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
  }

  export type EstadoUncheckedUpdateWithoutCandidatoInput = {
    id_Estado?: IntFieldUpdateOperationsInput | number
    Estado?: StringFieldUpdateOperationsInput | string
    uf?: StringFieldUpdateOperationsInput | string
  }

  export type municipioUpsertWithoutCandidatoInput = {
    update: XOR<municipioUpdateWithoutCandidatoInput, municipioUncheckedUpdateWithoutCandidatoInput>
    create: XOR<municipioCreateWithoutCandidatoInput, municipioUncheckedCreateWithoutCandidatoInput>
    where?: municipioWhereInput
  }

  export type municipioUpdateToOneWithWhereWithoutCandidatoInput = {
    where?: municipioWhereInput
    data: XOR<municipioUpdateWithoutCandidatoInput, municipioUncheckedUpdateWithoutCandidatoInput>
  }

  export type municipioUpdateWithoutCandidatoInput = {
    Municipio?: StringFieldUpdateOperationsInput | string
  }

  export type municipioUncheckedUpdateWithoutCandidatoInput = {
    idMunicipio?: IntFieldUpdateOperationsInput | number
    Municipio?: StringFieldUpdateOperationsInput | string
  }

  export type ImagesUpsertWithWhereUniqueWithoutPerfilInput = {
    where: ImagesWhereUniqueInput
    update: XOR<ImagesUpdateWithoutPerfilInput, ImagesUncheckedUpdateWithoutPerfilInput>
    create: XOR<ImagesCreateWithoutPerfilInput, ImagesUncheckedCreateWithoutPerfilInput>
  }

  export type ImagesUpdateWithWhereUniqueWithoutPerfilInput = {
    where: ImagesWhereUniqueInput
    data: XOR<ImagesUpdateWithoutPerfilInput, ImagesUncheckedUpdateWithoutPerfilInput>
  }

  export type ImagesUpdateManyWithWhereWithoutPerfilInput = {
    where: ImagesScalarWhereInput
    data: XOR<ImagesUpdateManyMutationInput, ImagesUncheckedUpdateManyWithoutPerfilInput>
  }

  export type ImagesScalarWhereInput = {
    AND?: ImagesScalarWhereInput | ImagesScalarWhereInput[]
    OR?: ImagesScalarWhereInput[]
    NOT?: ImagesScalarWhereInput | ImagesScalarWhereInput[]
    id?: IntFilter<"Images"> | number
    Url?: StringFilter<"Images"> | string
    FotoId?: IntFilter<"Images"> | number
  }

  export type VotosUpsertWithWhereUniqueWithoutCandidatoInput = {
    where: VotosWhereUniqueInput
    update: XOR<VotosUpdateWithoutCandidatoInput, VotosUncheckedUpdateWithoutCandidatoInput>
    create: XOR<VotosCreateWithoutCandidatoInput, VotosUncheckedCreateWithoutCandidatoInput>
  }

  export type VotosUpdateWithWhereUniqueWithoutCandidatoInput = {
    where: VotosWhereUniqueInput
    data: XOR<VotosUpdateWithoutCandidatoInput, VotosUncheckedUpdateWithoutCandidatoInput>
  }

  export type VotosUpdateManyWithWhereWithoutCandidatoInput = {
    where: VotosScalarWhereInput
    data: XOR<VotosUpdateManyMutationInput, VotosUncheckedUpdateManyWithoutCandidatoInput>
  }

  export type VotosScalarWhereInput = {
    AND?: VotosScalarWhereInput | VotosScalarWhereInput[]
    OR?: VotosScalarWhereInput[]
    NOT?: VotosScalarWhereInput | VotosScalarWhereInput[]
    id_voto?: IntFilter<"Votos"> | number
    Votar?: BoolFilter<"Votos"> | boolean
    candidatoId?: IntFilter<"Votos"> | number
  }

  export type CandidatoCreateWithoutMunicipioInput = {
    name: string
    apelido?: string | null
    estado: EstadoCreateNestedOneWithoutCandidatoInput
    images?: ImagesCreateNestedManyWithoutPerfilInput
    votos?: VotosCreateNestedManyWithoutCandidatoInput
  }

  export type CandidatoUncheckedCreateWithoutMunicipioInput = {
    id_candidato?: number
    name: string
    apelido?: string | null
    estado_id: number
    images?: ImagesUncheckedCreateNestedManyWithoutPerfilInput
    votos?: VotosUncheckedCreateNestedManyWithoutCandidatoInput
  }

  export type CandidatoCreateOrConnectWithoutMunicipioInput = {
    where: CandidatoWhereUniqueInput
    create: XOR<CandidatoCreateWithoutMunicipioInput, CandidatoUncheckedCreateWithoutMunicipioInput>
  }

  export type CandidatoCreateManyMunicipioInputEnvelope = {
    data: CandidatoCreateManyMunicipioInput | CandidatoCreateManyMunicipioInput[]
    skipDuplicates?: boolean
  }

  export type CandidatoUpsertWithWhereUniqueWithoutMunicipioInput = {
    where: CandidatoWhereUniqueInput
    update: XOR<CandidatoUpdateWithoutMunicipioInput, CandidatoUncheckedUpdateWithoutMunicipioInput>
    create: XOR<CandidatoCreateWithoutMunicipioInput, CandidatoUncheckedCreateWithoutMunicipioInput>
  }

  export type CandidatoUpdateWithWhereUniqueWithoutMunicipioInput = {
    where: CandidatoWhereUniqueInput
    data: XOR<CandidatoUpdateWithoutMunicipioInput, CandidatoUncheckedUpdateWithoutMunicipioInput>
  }

  export type CandidatoUpdateManyWithWhereWithoutMunicipioInput = {
    where: CandidatoScalarWhereInput
    data: XOR<CandidatoUpdateManyMutationInput, CandidatoUncheckedUpdateManyWithoutMunicipioInput>
  }

  export type CandidatoScalarWhereInput = {
    AND?: CandidatoScalarWhereInput | CandidatoScalarWhereInput[]
    OR?: CandidatoScalarWhereInput[]
    NOT?: CandidatoScalarWhereInput | CandidatoScalarWhereInput[]
    id_candidato?: IntFilter<"Candidato"> | number
    name?: StringFilter<"Candidato"> | string
    apelido?: StringNullableFilter<"Candidato"> | string | null
    estado_id?: IntFilter<"Candidato"> | number
    municipio_id?: IntFilter<"Candidato"> | number
  }

  export type CandidatoCreateWithoutEstadoInput = {
    name: string
    apelido?: string | null
    Municipio: municipioCreateNestedOneWithoutCandidatoInput
    images?: ImagesCreateNestedManyWithoutPerfilInput
    votos?: VotosCreateNestedManyWithoutCandidatoInput
  }

  export type CandidatoUncheckedCreateWithoutEstadoInput = {
    id_candidato?: number
    name: string
    apelido?: string | null
    municipio_id: number
    images?: ImagesUncheckedCreateNestedManyWithoutPerfilInput
    votos?: VotosUncheckedCreateNestedManyWithoutCandidatoInput
  }

  export type CandidatoCreateOrConnectWithoutEstadoInput = {
    where: CandidatoWhereUniqueInput
    create: XOR<CandidatoCreateWithoutEstadoInput, CandidatoUncheckedCreateWithoutEstadoInput>
  }

  export type CandidatoCreateManyEstadoInputEnvelope = {
    data: CandidatoCreateManyEstadoInput | CandidatoCreateManyEstadoInput[]
    skipDuplicates?: boolean
  }

  export type CandidatoUpsertWithWhereUniqueWithoutEstadoInput = {
    where: CandidatoWhereUniqueInput
    update: XOR<CandidatoUpdateWithoutEstadoInput, CandidatoUncheckedUpdateWithoutEstadoInput>
    create: XOR<CandidatoCreateWithoutEstadoInput, CandidatoUncheckedCreateWithoutEstadoInput>
  }

  export type CandidatoUpdateWithWhereUniqueWithoutEstadoInput = {
    where: CandidatoWhereUniqueInput
    data: XOR<CandidatoUpdateWithoutEstadoInput, CandidatoUncheckedUpdateWithoutEstadoInput>
  }

  export type CandidatoUpdateManyWithWhereWithoutEstadoInput = {
    where: CandidatoScalarWhereInput
    data: XOR<CandidatoUpdateManyMutationInput, CandidatoUncheckedUpdateManyWithoutEstadoInput>
  }

  export type CandidatoCreateWithoutImagesInput = {
    name: string
    apelido?: string | null
    estado: EstadoCreateNestedOneWithoutCandidatoInput
    Municipio: municipioCreateNestedOneWithoutCandidatoInput
    votos?: VotosCreateNestedManyWithoutCandidatoInput
  }

  export type CandidatoUncheckedCreateWithoutImagesInput = {
    id_candidato?: number
    name: string
    apelido?: string | null
    estado_id: number
    municipio_id: number
    votos?: VotosUncheckedCreateNestedManyWithoutCandidatoInput
  }

  export type CandidatoCreateOrConnectWithoutImagesInput = {
    where: CandidatoWhereUniqueInput
    create: XOR<CandidatoCreateWithoutImagesInput, CandidatoUncheckedCreateWithoutImagesInput>
  }

  export type CandidatoUpsertWithoutImagesInput = {
    update: XOR<CandidatoUpdateWithoutImagesInput, CandidatoUncheckedUpdateWithoutImagesInput>
    create: XOR<CandidatoCreateWithoutImagesInput, CandidatoUncheckedCreateWithoutImagesInput>
    where?: CandidatoWhereInput
  }

  export type CandidatoUpdateToOneWithWhereWithoutImagesInput = {
    where?: CandidatoWhereInput
    data: XOR<CandidatoUpdateWithoutImagesInput, CandidatoUncheckedUpdateWithoutImagesInput>
  }

  export type CandidatoUpdateWithoutImagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    apelido?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EstadoUpdateOneRequiredWithoutCandidatoNestedInput
    Municipio?: municipioUpdateOneRequiredWithoutCandidatoNestedInput
    votos?: VotosUpdateManyWithoutCandidatoNestedInput
  }

  export type CandidatoUncheckedUpdateWithoutImagesInput = {
    id_candidato?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    apelido?: NullableStringFieldUpdateOperationsInput | string | null
    estado_id?: IntFieldUpdateOperationsInput | number
    municipio_id?: IntFieldUpdateOperationsInput | number
    votos?: VotosUncheckedUpdateManyWithoutCandidatoNestedInput
  }

  export type CandidatoCreateWithoutVotosInput = {
    name: string
    apelido?: string | null
    estado: EstadoCreateNestedOneWithoutCandidatoInput
    Municipio: municipioCreateNestedOneWithoutCandidatoInput
    images?: ImagesCreateNestedManyWithoutPerfilInput
  }

  export type CandidatoUncheckedCreateWithoutVotosInput = {
    id_candidato?: number
    name: string
    apelido?: string | null
    estado_id: number
    municipio_id: number
    images?: ImagesUncheckedCreateNestedManyWithoutPerfilInput
  }

  export type CandidatoCreateOrConnectWithoutVotosInput = {
    where: CandidatoWhereUniqueInput
    create: XOR<CandidatoCreateWithoutVotosInput, CandidatoUncheckedCreateWithoutVotosInput>
  }

  export type CandidatoUpsertWithoutVotosInput = {
    update: XOR<CandidatoUpdateWithoutVotosInput, CandidatoUncheckedUpdateWithoutVotosInput>
    create: XOR<CandidatoCreateWithoutVotosInput, CandidatoUncheckedCreateWithoutVotosInput>
    where?: CandidatoWhereInput
  }

  export type CandidatoUpdateToOneWithWhereWithoutVotosInput = {
    where?: CandidatoWhereInput
    data: XOR<CandidatoUpdateWithoutVotosInput, CandidatoUncheckedUpdateWithoutVotosInput>
  }

  export type CandidatoUpdateWithoutVotosInput = {
    name?: StringFieldUpdateOperationsInput | string
    apelido?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EstadoUpdateOneRequiredWithoutCandidatoNestedInput
    Municipio?: municipioUpdateOneRequiredWithoutCandidatoNestedInput
    images?: ImagesUpdateManyWithoutPerfilNestedInput
  }

  export type CandidatoUncheckedUpdateWithoutVotosInput = {
    id_candidato?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    apelido?: NullableStringFieldUpdateOperationsInput | string | null
    estado_id?: IntFieldUpdateOperationsInput | number
    municipio_id?: IntFieldUpdateOperationsInput | number
    images?: ImagesUncheckedUpdateManyWithoutPerfilNestedInput
  }

  export type PesquisadoresCreateManyRolesInput = {
    id_Pesquisador?: number
    email: string
    name: string
    cpf: string
    senha: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PesquisadoresUpdateWithoutRolesInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PesquisadoresUncheckedUpdateWithoutRolesInput = {
    id_Pesquisador?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PesquisadoresUncheckedUpdateManyWithoutRolesInput = {
    id_Pesquisador?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImagesCreateManyPerfilInput = {
    id?: number
    Url: string
  }

  export type VotosCreateManyCandidatoInput = {
    id_voto?: number
    Votar: boolean
  }

  export type ImagesUpdateWithoutPerfilInput = {
    Url?: StringFieldUpdateOperationsInput | string
  }

  export type ImagesUncheckedUpdateWithoutPerfilInput = {
    id?: IntFieldUpdateOperationsInput | number
    Url?: StringFieldUpdateOperationsInput | string
  }

  export type ImagesUncheckedUpdateManyWithoutPerfilInput = {
    id?: IntFieldUpdateOperationsInput | number
    Url?: StringFieldUpdateOperationsInput | string
  }

  export type VotosUpdateWithoutCandidatoInput = {
    Votar?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VotosUncheckedUpdateWithoutCandidatoInput = {
    id_voto?: IntFieldUpdateOperationsInput | number
    Votar?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VotosUncheckedUpdateManyWithoutCandidatoInput = {
    id_voto?: IntFieldUpdateOperationsInput | number
    Votar?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CandidatoCreateManyMunicipioInput = {
    id_candidato?: number
    name: string
    apelido?: string | null
    estado_id: number
  }

  export type CandidatoUpdateWithoutMunicipioInput = {
    name?: StringFieldUpdateOperationsInput | string
    apelido?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: EstadoUpdateOneRequiredWithoutCandidatoNestedInput
    images?: ImagesUpdateManyWithoutPerfilNestedInput
    votos?: VotosUpdateManyWithoutCandidatoNestedInput
  }

  export type CandidatoUncheckedUpdateWithoutMunicipioInput = {
    id_candidato?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    apelido?: NullableStringFieldUpdateOperationsInput | string | null
    estado_id?: IntFieldUpdateOperationsInput | number
    images?: ImagesUncheckedUpdateManyWithoutPerfilNestedInput
    votos?: VotosUncheckedUpdateManyWithoutCandidatoNestedInput
  }

  export type CandidatoUncheckedUpdateManyWithoutMunicipioInput = {
    id_candidato?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    apelido?: NullableStringFieldUpdateOperationsInput | string | null
    estado_id?: IntFieldUpdateOperationsInput | number
  }

  export type CandidatoCreateManyEstadoInput = {
    id_candidato?: number
    name: string
    apelido?: string | null
    municipio_id: number
  }

  export type CandidatoUpdateWithoutEstadoInput = {
    name?: StringFieldUpdateOperationsInput | string
    apelido?: NullableStringFieldUpdateOperationsInput | string | null
    Municipio?: municipioUpdateOneRequiredWithoutCandidatoNestedInput
    images?: ImagesUpdateManyWithoutPerfilNestedInput
    votos?: VotosUpdateManyWithoutCandidatoNestedInput
  }

  export type CandidatoUncheckedUpdateWithoutEstadoInput = {
    id_candidato?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    apelido?: NullableStringFieldUpdateOperationsInput | string | null
    municipio_id?: IntFieldUpdateOperationsInput | number
    images?: ImagesUncheckedUpdateManyWithoutPerfilNestedInput
    votos?: VotosUncheckedUpdateManyWithoutCandidatoNestedInput
  }

  export type CandidatoUncheckedUpdateManyWithoutEstadoInput = {
    id_candidato?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    apelido?: NullableStringFieldUpdateOperationsInput | string | null
    municipio_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use RoleCountOutputTypeDefaultArgs instead
     */
    export type RoleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CandidatoCountOutputTypeDefaultArgs instead
     */
    export type CandidatoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CandidatoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MunicipioCountOutputTypeDefaultArgs instead
     */
    export type MunicipioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MunicipioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EstadoCountOutputTypeDefaultArgs instead
     */
    export type EstadoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EstadoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PesquisadoresDefaultArgs instead
     */
    export type PesquisadoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PesquisadoresDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleDefaultArgs instead
     */
    export type RoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CandidatoDefaultArgs instead
     */
    export type CandidatoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CandidatoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use municipioDefaultArgs instead
     */
    export type municipioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = municipioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EstadoDefaultArgs instead
     */
    export type EstadoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EstadoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ImagesDefaultArgs instead
     */
    export type ImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ImagesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VotosDefaultArgs instead
     */
    export type VotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VotosDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}