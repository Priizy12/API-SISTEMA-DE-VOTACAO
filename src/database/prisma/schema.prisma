
generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}


model Pesquisadores {

  id_Pesquisador        Int      @id @default(autoincrement())
  email   String   @unique
  name    String @db.VarChar(60)
  cpf String @unique @db.VarChar(14)
  senha String @db.VarChar(60)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Roles Role @relation(fields: [roleId], references: [id])
  roleId Int  
   estado Estado @relation(fields: [estado_id], references: [id_Estado])
   estado_id Int 
   Municipio municipio @relation(fields: [municipio_id], references: [idMunicipio])
   municipio_id Int

}

model Role {
  id        Int      @id @default(autoincrement())
  Role      String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  role Pesquisadores[]
}


model Candidato {
   id_candidato Int @id @default(autoincrement())
   name    String @db.VarChar(60) 
   apelido String? @db.VarChar(60) 
   estado Estado @relation(fields: [estado_id], references: [id_Estado])
   estado_id Int 
   Municipio municipio @relation(fields: [municipio_id], references: [idMunicipio])
   municipio_id Int
   images Images[] 

   
    votos Votos[]
}

model municipio {
  idMunicipio Int  @id @default(autoincrement())
  Municipio String
  candidato Candidato[]
  pesquisador Pesquisadores[]
}

model Estado {
  id_Estado Int @id @default(autoincrement())
  Estado String 
  uf String @db.VarChar(2)

  candidato Candidato[]
  pesquisador Pesquisadores[]
}


model Images {
  id Int  @id @default(autoincrement())
  Url String 
  perfil Candidato @relation(fields: [FotoId], references: [id_candidato])
  FotoId Int
}


model Votos {
  id_voto Int @id @default(autoincrement())
  Votar Boolean
  candidato   Candidato @relation(fields: [candidatoId], references: [id_candidato])
  candidatoId Int
}

